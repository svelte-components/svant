!function(){"use strict";const e=["client/client.d8862006.js","client/index.5fe12e39.js","client/DocsTable.a99d71d9.js","client/index.113e7ac2.js","client/basic.demo.6bc7dace.js","client/index.fbd54536.js","client/icon.demo.913a7d5a.js","client/separator.demo.cad42c28.js","client/multiple-separator.demo.7de788fd.js","client/basic.demo.bb9ce342.js","client/index.bb45c3fb.js","client/accordion.demo.c78310be.js","client/nested.demo.4634bfea.js","client/borderless.demo.911b3b4d.js","client/custom-panel.demo.c28b5797.js","client/hide-arrow.demo.1e3b1194.js","client/right-arrow.demo.f63b2351.js","client/custom-header.demo.3ff5f223.js","client/manual-active.demo.8a6e999e.js","client/type.demo.b4d3ae9e.js","client/index.500ec60a.js","client/icons.demo.8734a07d.js","client/size.demo.bf01d291.js","client/disabled.demo.e0235169.js","client/loading.demo.6953326b.js","client/danger.demo.149c9895.js","client/block.demo.957839e5.js","client/basic.demo.92bdf917.js","client/index.b2728060.js","client/async.demo.748947ee.js","client/footer.demo.07fde7f7.js","client/confirm.demo.ff00193b.js","client/ModalInfoExample.53e19fd0.js","client/information.demo.1cb7ff63.js","client/update-destroy.demo.b5c8d2e2.js","client/positioning.demo.8337081c.js","client/destroy-all.demo.df4494c1.js","client/client.055ac9c3.js"].concat(["service-worker-index.html","ant_logo.svg","favicon.png","global.css","great-success.png","logo-192.png","logo-512.png","manifest.json","prism/prism.css"]),t=new Set(e);self.addEventListener("install",t=>{t.waitUntil(caches.open("cache1588447083118").then(t=>t.addAll(e)).then(()=>{self.skipWaiting()}))}),self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(async e=>{for(const t of e)"cache1588447083118"!==t&&await caches.delete(t);self.clients.claim()}))}),self.addEventListener("fetch",e=>{if("GET"!==e.request.method||e.request.headers.has("range"))return;const c=new URL(e.request.url);c.protocol.startsWith("http")&&(c.hostname===self.location.hostname&&c.port!==self.location.port||(c.host===self.location.host&&t.has(c.pathname)?e.respondWith(caches.match(e.request)):"only-if-cached"!==e.request.cache&&e.respondWith(caches.open("offline1588447083118").then(async t=>{try{const c=await fetch(e.request);return t.put(e.request,c.clone()),c}catch(c){const s=await t.match(e.request);if(s)return s;throw c}}))))})}();
