!function(){"use strict";const e=["client/client.9668a923.js","client/index.f5b574dd.js","client/DocsTable.3e3bb4c3.js","client/index.ae1e0bb1.js","client/basic.demo.aa22cd32.js","client/index.7183866d.js","client/icon.demo.ee5b23dd.js","client/separator.demo.231e2d2e.js","client/multiple-separator.demo.96701fd1.js","client/basic.demo.362587ff.js","client/index.91362f26.js","client/accordion.demo.4cde8f6d.js","client/nested.demo.b0a53535.js","client/borderless.demo.c314056d.js","client/custom-panel.demo.d5ce79b2.js","client/hide-arrow.demo.c56d575f.js","client/right-arrow.demo.eff57ba9.js","client/custom-header.demo.45526a79.js","client/manual-active.demo.2dad5a98.js","client/type.demo.8b3a81d9.js","client/index.a680b5fb.js","client/icons.demo.3243710b.js","client/size.demo.946521b7.js","client/disabled.demo.b102eca6.js","client/loading.demo.fe41f110.js","client/danger.demo.2c38a4be.js","client/block.demo.41e058b1.js","client/basic.demo.aa0747d2.js","client/index.147ab54d.js","client/async.demo.efa0cc91.js","client/footer.demo.78f5781d.js","client/confirm.demo.460ad807.js","client/ModalInfoExample.22195468.js","client/information.demo.caa1b77d.js","client/update-destroy.demo.87698a0a.js","client/positioning.demo.9764aaff.js","client/destroy-all.demo.52f58eb3.js","client/basic.demo.02bad39f.js","client/index.c3ef9349.js","client/twotone.demo.13027f21.js","client/pandaicon.86b08cf8.js","client/harticon.baaec42c.js","client/custom.demo.441b72ea.js","client/client.caf405cd.js"].concat(["service-worker-index.html","ant_logo.svg","favicon.png","global.css","great-success.png","logo-192.png","logo-512.png","manifest.json","prism/prism.css"]),t=new Set(e);self.addEventListener("install",t=>{t.waitUntil(caches.open("cache1588447975583").then(t=>t.addAll(e)).then(()=>{self.skipWaiting()}))}),self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(async e=>{for(const t of e)"cache1588447975583"!==t&&await caches.delete(t);self.clients.claim()}))}),self.addEventListener("fetch",e=>{if("GET"!==e.request.method||e.request.headers.has("range"))return;const c=new URL(e.request.url);c.protocol.startsWith("http")&&(c.hostname===self.location.hostname&&c.port!==self.location.port||(c.host===self.location.host&&t.has(c.pathname)?e.respondWith(caches.match(e.request)):"only-if-cached"!==e.request.cache&&e.respondWith(caches.open("offline1588447975583").then(async t=>{try{const c=await fetch(e.request);return t.put(e.request,c.clone()),c}catch(c){const n=await t.match(e.request);if(n)return n;throw c}}))))})}();
