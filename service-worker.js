!function(){"use strict";const e=["client/client.6ddc1f6e.js","client/index.e96ca1a7.js","client/DocsTable.ebf3a4e3.js","client/index.8d2617b6.js","client/basic.demo.8f8d747e.js","client/index.6e4fdde2.js","client/icon.demo.812f2ae3.js","client/separator.demo.bc9162c3.js","client/multiple-separator.demo.5cac17c0.js","client/basic.demo.513f70e5.js","client/index.3e6e1533.js","client/disabled.demo.4d5c74b8.js","client/controlled.demo.e6880860.js","client/group.demo.b3a19fd3.js","client/checkall.demo.47753653.js","client/groupslot.demo.9110dee8.js","client/basic.demo.274fd1d0.js","client/index.37594963.js","client/accordion.demo.3181b9e3.js","client/nested.demo.b6232f5a.js","client/borderless.demo.0f111b8d.js","client/custom-panel.demo.c777c5bf.js","client/hide-arrow.demo.01b099ab.js","client/right-arrow.demo.27ad3e0d.js","client/custom-header.demo.5f8baf55.js","client/manual-active.demo.4765301b.js","client/type.demo.0882a489.js","client/index.de0104e9.js","client/icons.demo.befdaa1f.js","client/size.demo.feb07909.js","client/disabled.demo.2f7a7295.js","client/loading.demo.b7c1b82e.js","client/danger.demo.373cc5c4.js","client/block.demo.924faa42.js","client/basic.demo.949a4629.js","client/index.fd9481e8.js","client/async.demo.0609cb15.js","client/footer.demo.de4d14fd.js","client/confirm.demo.10b4b650.js","client/ModalInfoExample.54f1ce5f.js","client/information.demo.116d2f88.js","client/update-destroy.demo.d393cb46.js","client/positioning.demo.24777441.js","client/destroy-all.demo.b412a79e.js","client/basic.demo.312b6dac.js","client/index.46e2656e.js","client/twotone.demo.8689ba21.js","client/pandaicon.4ccca44c.js","client/harticon.17cf0d7a.js","client/custom.demo.70ea27ef.js","client/client.d6016159.js"].concat(["service-worker-index.html","ant_logo.svg","favicon.png","global.css","great-success.png","logo-192.png","logo-512.png","manifest.json","prism/prism.css","svant_logo.svg","svant_logo_full.svg"]),t=new Set(e);self.addEventListener("install",t=>{t.waitUntil(caches.open("cache1588530542044").then(t=>t.addAll(e)).then(()=>{self.skipWaiting()}))}),self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(async e=>{for(const t of e)"cache1588530542044"!==t&&await caches.delete(t);self.clients.claim()}))}),self.addEventListener("fetch",e=>{if("GET"!==e.request.method||e.request.headers.has("range"))return;const c=new URL(e.request.url);c.protocol.startsWith("http")&&(c.hostname===self.location.hostname&&c.port!==self.location.port||(c.host===self.location.host&&t.has(c.pathname)?e.respondWith(caches.match(e.request)):"only-if-cached"!==e.request.cache&&e.respondWith(caches.open("offline1588530542044").then(async t=>{try{const c=await fetch(e.request);return t.put(e.request,c.clone()),c}catch(c){const s=await t.match(e.request);if(s)return s;throw c}}))))})}();
