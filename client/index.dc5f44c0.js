import{S as o,i as n,s as e,x as t,e as a,t as l,a as r,K as s,b as i,f as c,g as d,d as m,c as f,M as p,h as u,j as h,k as g,N as $,a0 as y,a1 as b,v,w,O as M,n as E}from"./client.e374c2b6.js";import{P as k,D as C}from"./DocsTable.0438f7c6.js";import"./index.8d85b5d2.js";import O from"./basic.demo.68e46326.js";import B from"./async.demo.81bc105f.js";import T from"./footer.demo.df8f169e.js";import D from"./confirm.demo.42d59576.js";import"./ModalInfoExample.99e84406.js";import x from"./information.demo.5683e99f.js";import S from"./update-destroy.demo.7f33ed77.js";import P from"./positioning.demo.0e4c30a8.js";import I from"./destroy-all.demo.87f6c65b.js";function A(o){let n,e,E,A,V,j,K,H,L,W,F,N,U,z,Y,G,q,Q,R,J,X,Z,_,oo,no,eo,to,ao,lo,ro,so,io,co,mo,fo,po,uo,ho,go,$o,yo,bo,vo,wo,Mo,Eo,ko,Co,Oo,Bo,To,Do,xo,So,Po,Io,Ao,Vo,jo,Ko,Ho,Lo,Wo,Fo,No,Uo,zo,Yo,Go,qo,Qo,Ro,Jo,Xo,Zo,_o,on,nn,en,tn,an,ln,rn,sn,cn,dn,mn,fn,pn,un,hn,gn,$n,yn,bn,vn,wn,Mn,En,kn,Cn,On,Bn,Tn,Dn,xn,Sn,Pn,In,An,Vn,jn,Kn,Hn,Ln,Wn,Fn,Nn,Un,zn,Yn,Gn,qn,Qn,Rn,Jn,Xn,Zn,_n,oe,ne,ee,te,ae,le,re,se,ie,ce,de,me,fe,pe,ue,he,ge,$e;const ye=new O({}),be=new k({props:{language:"svelte",source:'<Button type="primary" on:click="{showModal}">Open Modal</Button>\n<Modal\n  title="Basic Modal"\n  {visible}\n  on:ok="{openAnother}"\n  on:cancel="{closeModal}">\n  <p>Some contents...</p>\n  <p>Some contents...</p>\n  <p>Some contents...</p>\n</Modal>\n\n<script>\n  import { Modal, Button } from "svant";\n\n  let visible = false;\n\n  function showModal() {\n    visible = true;\n  }\n\n  function closeModal() {\n    visible = false;\n  }\n\n  function openAnother() {\n    Modal.confirm({\n      content: "Are you sure?",\n      onOk: () => {\n        closeModal();\n      }\n    });\n  }\n<\/script>\n'}}),ve=new B({}),we=new k({props:{language:"svelte",source:'<Button type="primary" on:click="{showModal}">\n  Open Modal with async logic\n</Button>\n<Modal\n  title="Title"\n  {visible}\n  on:ok="{handleOk}"\n  {confirmLoading}\n  on:cancel="{handleCancel}">\n  <p>{ModalText}</p>\n</Modal>\n\n<script>\n  import { Modal, Button } from "svant";\n\n  let visible = false;\n  let ModalText = "Content of the modal";\n  let confirmLoading = false;\n\n  function showModal() {\n    visible = true;\n  }\n\n  function handleOk() {\n    ModalText = "The modal will be closed after two seconds";\n    confirmLoading = true;\n\n    setTimeout(() => {\n      visible = false;\n      confirmLoading = false;\n      ModalText = "Content of the modal";\n    }, 2000);\n  }\n\n  function handleCancel() {\n    console.log("Cancel button pressed");\n    visible = false;\n  }\n<\/script>\n'}}),Me=new T({}),Ee=new k({props:{language:"svelte",source:'<Button type="primary" on:click="{showModal}">\n  Open Modal with customized footer\n</Button>\n<Modal {visible} title="Title" on:ok="{closeModal}" on:cancel="{closeModal}">\n  <p>Some contents...</p>\n  <p>Some contents...</p>\n  <p>Some contents...</p>\n  <p>Some contents...</p>\n  <p>Some contents...</p>\n\n  <span slot="footer">\n    <Button on:click="{closeModal}">Return</Button>\n    <Button type="primary" on:click="{closeModal}">Submit</Button>\n  </span>\n</Modal>\n\n<script>\n  import { Modal, Button } from "svant";\n\n  let visible = false;\n\n  function showModal() {\n    visible = true;\n  }\n\n  function closeModal() {\n    visible = false;\n  }\n<\/script>\n'}}),ke=new D({}),Ce=new k({props:{language:"svelte",source:'<Button on:click="{showConfirm}">Confirm</Button>\n<Button on:click="{showDeleteConfirm}" type="dashed">Delete</Button>\n<Button on:click="{showPropsConfirm}" type="dashed">With extra props</Button>\n<Button on:click="{showPromiseConfirm}">Confirm with Promise</Button>\n\n<script>\n  import { Button, Modal } from "svant";\n  import { ExclamationCircleOutlined } from "svant/icons";\n\n  const { confirm } = Modal;\n\n  function showConfirm() {\n    confirm({\n      title: "Do you want to delete these items?",\n      icon: ExclamationCircleOutlined,\n      content: "Some descriptions",\n      onOk() {\n        console.log("OK");\n      },\n      onCancel() {\n        console.log("Cancel");\n      }\n    });\n  }\n\n  function showDeleteConfirm() {\n    confirm({\n      title: "Are you sure delete this task?",\n      icon: ExclamationCircleOutlined,\n      content: "Some descriptions",\n      okText: "Yes",\n      okType: "danger",\n      cancelText: "No",\n      onOk() {\n        console.log("OK");\n      },\n      onCancel() {\n        console.log("Cancel");\n      }\n    });\n  }\n\n  function showPropsConfirm() {\n    confirm({\n      title: "Are you sure delete this task?",\n      icon: ExclamationCircleOutlined,\n      content: "Some descriptions",\n      okText: "Yes",\n      okType: "danger",\n      okButtonProps: {\n        disabled: true\n      },\n      cancelText: "No",\n      onOk() {\n        console.log("OK");\n      },\n      onCancel() {\n        console.log("Cancel");\n      }\n    });\n  }\n\n  function showPromiseConfirm() {\n    confirm({\n      title: "Do you want to delete these items?",\n      icon: ExclamationCircleOutlined,\n      content:\n        "When clicked the OK button, this dialog will be closed after 1 second",\n      onOk() {\n        return new Promise((resolve, reject) => {\n          setTimeout(Math.random() > 0.5 ? resolve : reject, 1000);\n        }).catch(() => console.log("Oops errors!"));\n      },\n      onCancel() {}\n    });\n  }\n<\/script>\n'}}),Oe=new x({}),Be=new k({props:{language:"svelte",source:'<div class="information-buttons">\n  <Button on:click="{info}">Info</Button>\n  <Button on:click="{success}">Success</Button>\n  <Button on:click="{error}">Error</Button>\n  <Button on:click="{warning}">Warning</Button>\n</div>\n\n<script>\n  import { Button, Modal } from "svant";\n  import ModalInfoContent from "./ModalInfoExample.svelte";\n\n  function info() {\n    Modal.info({\n      title: "This is a notification message",\n      content: ModalInfoContent,\n      autoFocusButton: "ok",\n      onOk() {\n        console.log("OK Clicked");\n      }\n    });\n  }\n\n  function success() {\n    Modal.success({\n      content: "some messages...some messages..."\n    });\n  }\n\n  function error() {\n    Modal.error({\n      title: "This is an error message",\n      content: "some messages...some messages..."\n    });\n  }\n\n  function warning() {\n    Modal.warning({\n      title: "This is a warning message",\n      content: "some messages...some messages...",\n      closeable: true\n    });\n  }\n<\/script>\n'}}),Te=new S({}),De=new k({props:{language:"svelte",source:'<Button on:click="{countDown}">Open modal to close in 3s</Button>\n\n<script>\n  import { Button, Modal } from "svant";\n\n  function countDown() {\n    let secondsToGo = 3;\n    const modal = Modal.success({\n      title: "This is a notification message",\n      content: `This modal will be destroyed after ${secondsToGo} second.`\n    });\n    const timer = setInterval(() => {\n      secondsToGo -= 1;\n      modal.$set({\n        content: `This modal will be destroyed after ${secondsToGo} second.`\n      });\n    }, 1000);\n    setTimeout(() => {\n      clearInterval(timer);\n      modal.destroy();\n    }, secondsToGo * 1000);\n  }\n<\/script>\n'}}),xe=new P({}),Se=new k({props:{language:"svelte",source:'<Button type="primary" on:click="{() => setModal1Visible(true)}">\n  Open 20px from the top\n</Button>\n\n<Button type="primary" on:click="{() => setModal2Visible(true)}">\n  Vertically centered\n</Button>\n\n<Modal\n  title="Top right corner"\n  verticalPosition="{{ top: \'20px\' }}"\n  visible="{modal1Visible}"\n  on:ok="{() => setModal1Visible(false)}"\n  on:cancel="{() => setModal1Visible(false)}">\n  <p>some contents...</p>\n  <p>some contents...</p>\n  <p>some contents...</p>\n</Modal>\n\n<Modal\n  title="Vertically centered modal dialog"\n  centered\n  visible="{modal2Visible}"\n  on:ok="{() => setModal2Visible(false)}"\n  on:cancel="{() => setModal2Visible(false)}">\n  <p>some contents...</p>\n  <p>some contents...</p>\n  <p>some contents...</p>\n</Modal>\n\n<script>\n  import { Button, Modal } from "svant";\n\n  export let modal1Visible = false;\n  export let modal2Visible = false;\n\n  function setModal1Visible(visible) {\n    modal1Visible = visible;\n  }\n\n  function setModal2Visible(visible) {\n    modal2Visible = visible;\n  }\n<\/script>\n'}}),Pe=new I({}),Ie=new k({props:{language:"svelte",source:'<Button on:click="{showAll}">Show Modal</Button>\n\n<script>\n  import { Button, Modal } from "svant";\n  import { ExclamationCircleOutlined } from "svant/icons";\n\n  const { confirm } = Modal;\n\n  function showAll() {\n    for (let i = 0; i < 3; i += 1) {\n      setTimeout(() => {\n        confirm({\n          icon: ExclamationCircleOutlined,\n          content: "Clicking any button will close all three",\n          onOk() {\n            destroyAll();\n          },\n          onCancel() {\n            destroyAll();\n          }\n        });\n      }, i * 500);\n    }\n  }\n\n  function destroyAll() {\n    Modal.destroyAll();\n  }\n<\/script>\n'}}),Ae=[o[0]];let Ve={};for(let o=0;o<Ae.length;o+=1)Ve=t(Ve,Ae[o]);const je=new C({props:Ve}),Ke=[o[1]];let He={};for(let o=0;o<Ke.length;o+=1)He=t(He,Ke[o]);const Le=new C({props:He}),We=[o[2]];let Fe={};for(let o=0;o<We.length;o+=1)Fe=t(Fe,We[o]);const Ne=new C({props:Fe});return{c(){n=a("h1"),e=l("Modal"),E=r(),A=a("p"),V=l("Description of the Modal's function."),j=r(),K=a("h2"),H=l("Examples"),L=r(),W=a("h3"),F=l("Basic"),N=r(),U=a("div"),s(ye.$$.fragment),z=r(),s(be.$$.fragment),Y=r(),G=a("h3"),q=l("Asynchronously Close"),Q=r(),R=a("p"),J=l("Asynchronously close a modal dialog when a the OK button is pressed. For example, you can use this pattern when you submit a form."),X=r(),Z=a("div"),s(ve.$$.fragment),_=r(),s(we.$$.fragment),oo=r(),no=a("h3"),eo=l("Customized Footer"),to=r(),ao=a("p"),lo=l("A more complex example which define a customized footer button bar. The dialog will change to loading state after clicking the submit button, and when the loading is done, the modal dialog will be closed."),ro=r(),so=a("p"),io=l("You could set the footer prop to null if you don't need default footer buttons."),co=r(),mo=a("div"),s(Me.$$.fragment),fo=r(),s(Ee.$$.fragment),po=r(),uo=a("h3"),ho=l("Confirmation Modal Dialog"),go=r(),$o=a("p"),yo=l("Use "),bo=a("code"),vo=l("Modal.confirm()"),wo=l(" to show a confirmation modal dialog. The "),Mo=a("code"),Eo=l("onOk"),ko=l(" and "),Co=a("code"),Oo=l("onCancel"),Bo=l(" buttons can return a promise and will delay the modal from closing until completed."),To=r(),Do=a("div"),s(ke.$$.fragment),xo=r(),s(Ce.$$.fragment),So=r(),Po=a("h3"),Io=l("Information Modal Dialog"),Ao=r(),Vo=a("p"),jo=l("The information modal dialog is used to communicate system status. Only one button is used to close the dialog."),Ko=r(),Ho=a("div"),s(Oe.$$.fragment),Lo=r(),s(Be.$$.fragment),Wo=r(),Fo=a("h3"),No=l("Manually Updating and Destroying"),Uo=r(),zo=a("p"),Yo=l("Use Svelte's built in "),Go=a("code"),qo=l("$set"),Qo=l(" function to update the modal. The "),Ro=a("code"),Jo=l("Modal.destroy()"),Xo=l(" function will destroy a modal."),Zo=r(),_o=a("div"),s(Te.$$.fragment),on=r(),s(De.$$.fragment),nn=r(),en=a("h3"),tn=l("Positioning"),an=r(),ln=a("p"),rn=l("You can use the centered prop, or set the verticalPosition's top or bottom to position the modal."),sn=r(),cn=a("div"),s(xe.$$.fragment),dn=r(),s(Se.$$.fragment),mn=r(),fn=a("h3"),pn=l("Destroying all Modals Open"),un=r(),hn=a("p"),gn=a("code"),$n=l("Modal.destroyAll()"),yn=l(" will destroy all confirmation modal dialogs."),bn=r(),vn=a("div"),s(Pe.$$.fragment),wn=r(),s(Ie.$$.fragment),Mn=r(),En=a("h2"),kn=l("API"),Cn=r(),s(je.$$.fragment),On=r(),s(Le.$$.fragment),Bn=r(),Tn=a("h3"),Dn=l("Modal.method()"),xn=r(),Sn=a("p"),Pn=l("There are five ways to display the information based on the content's nature:"),In=r(),An=a("ul"),Vn=a("li"),jn=a("code"),Kn=l("Modal.info"),Hn=r(),Ln=a("li"),Wn=a("code"),Fn=l("Modal.success"),Nn=r(),Un=a("li"),zn=a("code"),Yn=l("Modal.error"),Gn=r(),qn=a("li"),Qn=a("code"),Rn=l("Modal.warning"),Jn=r(),Xn=a("li"),Zn=a("code"),_n=l("Modal.confirm"),oe=r(),ne=a("p"),ee=l("The items listed above are all functions, expecting a settings object as parameter. The settings object takes any of the props above as attributes."),te=r(),ae=a("blockquote"),le=a("p"),re=l("Note: The "),se=a("code"),ie=l("closeable"),ce=l(" and "),de=a("code"),me=l("maskClosable"),fe=l(" props default to false for these types of modals."),pe=r(),ue=a("p"),he=l("Additionally these options are available:"),ge=r(),s(Ne.$$.fragment),this.h()},l(o){n=i(o,"H1",{});var t=c(n);e=d(t,"Modal"),t.forEach(m),E=f(o),A=i(o,"P",{});var a=c(A);V=d(a,"Description of the Modal's function."),a.forEach(m),j=f(o),K=i(o,"H2",{});var l=c(K);H=d(l,"Examples"),l.forEach(m),L=f(o),W=i(o,"H3",{});var r=c(W);F=d(r,"Basic"),r.forEach(m),N=f(o),U=i(o,"DIV",{id:!0});var s=c(U);p(ye.$$.fragment,s),s.forEach(m),z=f(o),p(be.$$.fragment,o),Y=f(o),G=i(o,"H3",{});var u=c(G);q=d(u,"Asynchronously Close"),u.forEach(m),Q=f(o),R=i(o,"P",{});var h=c(R);J=d(h,"Asynchronously close a modal dialog when a the OK button is pressed. For example, you can use this pattern when you submit a form."),h.forEach(m),X=f(o),Z=i(o,"DIV",{id:!0});var g=c(Z);p(ve.$$.fragment,g),g.forEach(m),_=f(o),p(we.$$.fragment,o),oo=f(o),no=i(o,"H3",{});var $=c(no);eo=d($,"Customized Footer"),$.forEach(m),to=f(o),ao=i(o,"P",{});var y=c(ao);lo=d(y,"A more complex example which define a customized footer button bar. The dialog will change to loading state after clicking the submit button, and when the loading is done, the modal dialog will be closed."),y.forEach(m),ro=f(o),so=i(o,"P",{});var b=c(so);io=d(b,"You could set the footer prop to null if you don't need default footer buttons."),b.forEach(m),co=f(o),mo=i(o,"DIV",{id:!0});var v=c(mo);p(Me.$$.fragment,v),v.forEach(m),fo=f(o),p(Ee.$$.fragment,o),po=f(o),uo=i(o,"H3",{});var w=c(uo);ho=d(w,"Confirmation Modal Dialog"),w.forEach(m),go=f(o),$o=i(o,"P",{});var M=c($o);yo=d(M,"Use "),bo=i(M,"CODE",{});var k=c(bo);vo=d(k,"Modal.confirm()"),k.forEach(m),wo=d(M," to show a confirmation modal dialog. The "),Mo=i(M,"CODE",{});var C=c(Mo);Eo=d(C,"onOk"),C.forEach(m),ko=d(M," and "),Co=i(M,"CODE",{});var O=c(Co);Oo=d(O,"onCancel"),O.forEach(m),Bo=d(M," buttons can return a promise and will delay the modal from closing until completed."),M.forEach(m),To=f(o),Do=i(o,"DIV",{id:!0});var B=c(Do);p(ke.$$.fragment,B),B.forEach(m),xo=f(o),p(Ce.$$.fragment,o),So=f(o),Po=i(o,"H3",{});var T=c(Po);Io=d(T,"Information Modal Dialog"),T.forEach(m),Ao=f(o),Vo=i(o,"P",{});var D=c(Vo);jo=d(D,"The information modal dialog is used to communicate system status. Only one button is used to close the dialog."),D.forEach(m),Ko=f(o),Ho=i(o,"DIV",{id:!0});var x=c(Ho);p(Oe.$$.fragment,x),x.forEach(m),Lo=f(o),p(Be.$$.fragment,o),Wo=f(o),Fo=i(o,"H3",{});var S=c(Fo);No=d(S,"Manually Updating and Destroying"),S.forEach(m),Uo=f(o),zo=i(o,"P",{});var P=c(zo);Yo=d(P,"Use Svelte's built in "),Go=i(P,"CODE",{});var I=c(Go);qo=d(I,"$set"),I.forEach(m),Qo=d(P," function to update the modal. The "),Ro=i(P,"CODE",{});var $e=c(Ro);Jo=d($e,"Modal.destroy()"),$e.forEach(m),Xo=d(P," function will destroy a modal."),P.forEach(m),Zo=f(o),_o=i(o,"DIV",{id:!0});var Ae=c(_o);p(Te.$$.fragment,Ae),Ae.forEach(m),on=f(o),p(De.$$.fragment,o),nn=f(o),en=i(o,"H3",{});var Ve=c(en);tn=d(Ve,"Positioning"),Ve.forEach(m),an=f(o),ln=i(o,"P",{});var Ke=c(ln);rn=d(Ke,"You can use the centered prop, or set the verticalPosition's top or bottom to position the modal."),Ke.forEach(m),sn=f(o),cn=i(o,"DIV",{id:!0});var He=c(cn);p(xe.$$.fragment,He),He.forEach(m),dn=f(o),p(Se.$$.fragment,o),mn=f(o),fn=i(o,"H3",{});var We=c(fn);pn=d(We,"Destroying all Modals Open"),We.forEach(m),un=f(o),hn=i(o,"P",{});var Fe=c(hn);gn=i(Fe,"CODE",{});var Ue=c(gn);$n=d(Ue,"Modal.destroyAll()"),Ue.forEach(m),yn=d(Fe," will destroy all confirmation modal dialogs."),Fe.forEach(m),bn=f(o),vn=i(o,"DIV",{id:!0});var ze=c(vn);p(Pe.$$.fragment,ze),ze.forEach(m),wn=f(o),p(Ie.$$.fragment,o),Mn=f(o),En=i(o,"H2",{});var Ye=c(En);kn=d(Ye,"API"),Ye.forEach(m),Cn=f(o),p(je.$$.fragment,o),On=f(o),p(Le.$$.fragment,o),Bn=f(o),Tn=i(o,"H3",{});var Ge=c(Tn);Dn=d(Ge,"Modal.method()"),Ge.forEach(m),xn=f(o),Sn=i(o,"P",{});var qe=c(Sn);Pn=d(qe,"There are five ways to display the information based on the content's nature:"),qe.forEach(m),In=f(o),An=i(o,"UL",{});var Qe=c(An);Vn=i(Qe,"LI",{});var Re=c(Vn);jn=i(Re,"CODE",{});var Je=c(jn);Kn=d(Je,"Modal.info"),Je.forEach(m),Re.forEach(m),Hn=f(Qe),Ln=i(Qe,"LI",{});var Xe=c(Ln);Wn=i(Xe,"CODE",{});var Ze=c(Wn);Fn=d(Ze,"Modal.success"),Ze.forEach(m),Xe.forEach(m),Nn=f(Qe),Un=i(Qe,"LI",{});var _e=c(Un);zn=i(_e,"CODE",{});var ot=c(zn);Yn=d(ot,"Modal.error"),ot.forEach(m),_e.forEach(m),Gn=f(Qe),qn=i(Qe,"LI",{});var nt=c(qn);Qn=i(nt,"CODE",{});var et=c(Qn);Rn=d(et,"Modal.warning"),et.forEach(m),nt.forEach(m),Jn=f(Qe),Xn=i(Qe,"LI",{});var tt=c(Xn);Zn=i(tt,"CODE",{});var at=c(Zn);_n=d(at,"Modal.confirm"),at.forEach(m),tt.forEach(m),Qe.forEach(m),oe=f(o),ne=i(o,"P",{});var lt=c(ne);ee=d(lt,"The items listed above are all functions, expecting a settings object as parameter. The settings object takes any of the props above as attributes."),lt.forEach(m),te=f(o),ae=i(o,"BLOCKQUOTE",{});var rt=c(ae);le=i(rt,"P",{});var st=c(le);re=d(st,"Note: The "),se=i(st,"CODE",{});var it=c(se);ie=d(it,"closeable"),it.forEach(m),ce=d(st," and "),de=i(st,"CODE",{});var ct=c(de);me=d(ct,"maskClosable"),ct.forEach(m),fe=d(st," props default to false for these types of modals."),st.forEach(m),rt.forEach(m),pe=f(o),ue=i(o,"P",{});var dt=c(ue);he=d(dt,"Additionally these options are available:"),dt.forEach(m),ge=f(o),p(Ne.$$.fragment,o),this.h()},h(){u(U,"id","components-modal-demo-basic"),u(Z,"id","components-modal-demo-async-close"),u(mo,"id","components-modal-demo-async-close"),u(Do,"id","components-modal-demo-confirm"),u(Ho,"id","components-modal-demo-information"),u(_o,"id","components-modal-demo-update-destroy"),u(cn,"id","components-modal-demo-position"),u(vn,"id","components-modal-demo-destroy-all")},m(o,t){h(o,n,t),g(n,e),h(o,E,t),h(o,A,t),g(A,V),h(o,j,t),h(o,K,t),g(K,H),h(o,L,t),h(o,W,t),g(W,F),h(o,N,t),h(o,U,t),$(ye,U,null),h(o,z,t),$(be,o,t),h(o,Y,t),h(o,G,t),g(G,q),h(o,Q,t),h(o,R,t),g(R,J),h(o,X,t),h(o,Z,t),$(ve,Z,null),h(o,_,t),$(we,o,t),h(o,oo,t),h(o,no,t),g(no,eo),h(o,to,t),h(o,ao,t),g(ao,lo),h(o,ro,t),h(o,so,t),g(so,io),h(o,co,t),h(o,mo,t),$(Me,mo,null),h(o,fo,t),$(Ee,o,t),h(o,po,t),h(o,uo,t),g(uo,ho),h(o,go,t),h(o,$o,t),g($o,yo),g($o,bo),g(bo,vo),g($o,wo),g($o,Mo),g(Mo,Eo),g($o,ko),g($o,Co),g(Co,Oo),g($o,Bo),h(o,To,t),h(o,Do,t),$(ke,Do,null),h(o,xo,t),$(Ce,o,t),h(o,So,t),h(o,Po,t),g(Po,Io),h(o,Ao,t),h(o,Vo,t),g(Vo,jo),h(o,Ko,t),h(o,Ho,t),$(Oe,Ho,null),h(o,Lo,t),$(Be,o,t),h(o,Wo,t),h(o,Fo,t),g(Fo,No),h(o,Uo,t),h(o,zo,t),g(zo,Yo),g(zo,Go),g(Go,qo),g(zo,Qo),g(zo,Ro),g(Ro,Jo),g(zo,Xo),h(o,Zo,t),h(o,_o,t),$(Te,_o,null),h(o,on,t),$(De,o,t),h(o,nn,t),h(o,en,t),g(en,tn),h(o,an,t),h(o,ln,t),g(ln,rn),h(o,sn,t),h(o,cn,t),$(xe,cn,null),h(o,dn,t),$(Se,o,t),h(o,mn,t),h(o,fn,t),g(fn,pn),h(o,un,t),h(o,hn,t),g(hn,gn),g(gn,$n),g(hn,yn),h(o,bn,t),h(o,vn,t),$(Pe,vn,null),h(o,wn,t),$(Ie,o,t),h(o,Mn,t),h(o,En,t),g(En,kn),h(o,Cn,t),$(je,o,t),h(o,On,t),$(Le,o,t),h(o,Bn,t),h(o,Tn,t),g(Tn,Dn),h(o,xn,t),h(o,Sn,t),g(Sn,Pn),h(o,In,t),h(o,An,t),g(An,Vn),g(Vn,jn),g(jn,Kn),g(An,Hn),g(An,Ln),g(Ln,Wn),g(Wn,Fn),g(An,Nn),g(An,Un),g(Un,zn),g(zn,Yn),g(An,Gn),g(An,qn),g(qn,Qn),g(Qn,Rn),g(An,Jn),g(An,Xn),g(Xn,Zn),g(Zn,_n),h(o,oe,t),h(o,ne,t),g(ne,ee),h(o,te,t),h(o,ae,t),g(ae,le),g(le,re),g(le,se),g(se,ie),g(le,ce),g(le,de),g(de,me),g(le,fe),h(o,pe,t),h(o,ue,t),g(ue,he),h(o,ge,t),$(Ne,o,t),$e=!0},p(o,[n]){const e=1&n?y(Ae,[b(o[0])]):{};je.$set(e);const t=2&n?y(Ke,[b(o[1])]):{};Le.$set(t);const a=4&n?y(We,[b(o[2])]):{};Ne.$set(a)},i(o){$e||(v(ye.$$.fragment,o),v(be.$$.fragment,o),v(ve.$$.fragment,o),v(we.$$.fragment,o),v(Me.$$.fragment,o),v(Ee.$$.fragment,o),v(ke.$$.fragment,o),v(Ce.$$.fragment,o),v(Oe.$$.fragment,o),v(Be.$$.fragment,o),v(Te.$$.fragment,o),v(De.$$.fragment,o),v(xe.$$.fragment,o),v(Se.$$.fragment,o),v(Pe.$$.fragment,o),v(Ie.$$.fragment,o),v(je.$$.fragment,o),v(Le.$$.fragment,o),v(Ne.$$.fragment,o),$e=!0)},o(o){w(ye.$$.fragment,o),w(be.$$.fragment,o),w(ve.$$.fragment,o),w(we.$$.fragment,o),w(Me.$$.fragment,o),w(Ee.$$.fragment,o),w(ke.$$.fragment,o),w(Ce.$$.fragment,o),w(Oe.$$.fragment,o),w(Be.$$.fragment,o),w(Te.$$.fragment,o),w(De.$$.fragment,o),w(xe.$$.fragment,o),w(Se.$$.fragment,o),w(Pe.$$.fragment,o),w(Ie.$$.fragment,o),w(je.$$.fragment,o),w(Le.$$.fragment,o),w(Ne.$$.fragment,o),$e=!1},d(o){o&&m(n),o&&m(E),o&&m(A),o&&m(j),o&&m(K),o&&m(L),o&&m(W),o&&m(N),o&&m(U),M(ye),o&&m(z),M(be,o),o&&m(Y),o&&m(G),o&&m(Q),o&&m(R),o&&m(X),o&&m(Z),M(ve),o&&m(_),M(we,o),o&&m(oo),o&&m(no),o&&m(to),o&&m(ao),o&&m(ro),o&&m(so),o&&m(co),o&&m(mo),M(Me),o&&m(fo),M(Ee,o),o&&m(po),o&&m(uo),o&&m(go),o&&m($o),o&&m(To),o&&m(Do),M(ke),o&&m(xo),M(Ce,o),o&&m(So),o&&m(Po),o&&m(Ao),o&&m(Vo),o&&m(Ko),o&&m(Ho),M(Oe),o&&m(Lo),M(Be,o),o&&m(Wo),o&&m(Fo),o&&m(Uo),o&&m(zo),o&&m(Zo),o&&m(_o),M(Te),o&&m(on),M(De,o),o&&m(nn),o&&m(en),o&&m(an),o&&m(ln),o&&m(sn),o&&m(cn),M(xe),o&&m(dn),M(Se,o),o&&m(mn),o&&m(fn),o&&m(un),o&&m(hn),o&&m(bn),o&&m(vn),M(Pe),o&&m(wn),M(Ie,o),o&&m(Mn),o&&m(En),o&&m(Cn),M(je,o),o&&m(On),M(Le,o),o&&m(Bn),o&&m(Tn),o&&m(xn),o&&m(Sn),o&&m(In),o&&m(An),o&&m(oe),o&&m(ne),o&&m(te),o&&m(ae),o&&m(pe),o&&m(ue),o&&m(ge),M(Ne,o)}}}function V(o){return[{title:"Attributes",columns:["Property","Description","Type","Default"],data:[{property:"bodyStyle",description:"Body style for modal body element. Such as height, padding etc.",type:"String|Object",default:""},{property:"cancelText",description:"Text of the Cancel button.",type:"String",default:"Cancel"},{property:"centered",description:"Centered Modal",type:"Boolean",default:"false"},{property:"closable",description:"Whether a close (x) button is visible on top right of the modal dialog or not.",type:"Boolean",default:"true"},{property:"closeIcon",description:"Custom close icon.",type:"SvelteComponent",default:"CloseOutlined"},{property:"confirmLoading",description:"Whether to apply loading visual effect for OK button or not.",type:"Boolean",default:"false"},{property:"mask",description:"Whether show mask or not.",type:"Boolean",default:"true"},{property:"maskClosable",description:"Whether to close the modal dialog when the mask (area outside the modal) is clicked.",type:"Boolean",default:"true"},{property:"maskStyle",description:"Style for modal's mask element.",type:"String|Object",default:""},{property:"okText",description:"Text of the OK button.",type:"String",default:"OK"},{property:"okType",description:"Button `type` of the OK button.",type:"String",default:"primary"},{property:"okButtonProps",description:"The OK button props.",type:"Object",default:"{}"},{property:"cancelButtonProps",description:"The Cancel button props.",type:"Object",default:"{}"},{property:"verticalPosition",description:"The vertical position of the modal (top or bottom)",type:"Object",default:"{}"},{property:"title",description:"The modal dialog's title",type:"String",default:"-"},{property:"visible",description:"Whether the modal dialog is visible or not.",type:"Boolean",default:"false"},{property:"width",description:"Width of the modal dialog.",type:"String",default:"520px"},{property:"wrapClassName",description:"The class name of the container of the modal dialog.",type:"String",default:"-"},{property:"zIndex",description:"The `z-index` of the Modal.",type:"Number",default:"1000"},{property:"autoFocusButton",description:"Specify which button to autofocus when the modal opens.",type:"null|'ok'|'cancel'",default:"ok"},{property:"keyboard",description:"Whether the escape key will close the modal.",type:"Boolean",default:"true"}]},{title:"Events",columns:["Name","Description"],data:[{name:"cancel",description:"Specify a function that will be called when a user clicks mask, close button on top right or Cancel button."},{name:"ok",description:"Specify a function that will be called when a user clicks the OK button."},{property:"after-close",description:"Specify a function that will be called when modal is closed completely."}]},{title:"Modal.method() Attributes",columns:["Property","Description","Type","Default"],data:[{property:"content",description:"Content for the modal body.",type:"String|SvelteComponent",default:"-"},{property:"icon",description:"Custom icon to display next to the content.",type:"SvelteComponent",default:"Depends on the modal method"},{property:"onCancel",description:"Specify a function that will be called when a user clicks mask, close button on top right or Cancel button.",type:"Function",default:"-"},{property:"onOk",description:"Specify a function that will be called when a user clicks the OK button.",type:"Function",default:"-"}]}]}class j extends o{constructor(o){super(),n(this,o,V,A,e,{})}}function K(o){let n,e;const t=new j({});return{c(){n=a("div"),s(t.$$.fragment),this.h()},l(o){n=i(o,"DIV",{class:!0});var e=c(n);p(t.$$.fragment,e),e.forEach(m),this.h()},h(){u(n,"class","markdown api-container")},m(o,a){h(o,n,a),$(t,n,null),e=!0},p:E,i(o){e||(v(t.$$.fragment,o),e=!0)},o(o){w(t.$$.fragment,o),e=!1},d(o){o&&m(n),M(t)}}}export default class extends o{constructor(o){super(),n(this,o,null,K,e,{})}}
