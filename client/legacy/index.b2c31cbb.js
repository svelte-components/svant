import{_ as e,a as t,i as n,s as o,b as a,S as i,C as l,e as r,t as s,c,J as p,g as d,h as u,j as h,d as f,f as m,K as v,l as g,m as $,L as y,x as b,ai as w,aj as S,A as O,B as C,N as x,o as E,p as T,k as P,q as k,n as D}from"./client.940f1054.js";import{E as j,D as B}from"./DocsTable.a6abc551.js";import"./index.c8e50633.js";import I from"./basic.demo.c4bb98a8.js";import z from"./search.demo.19152f50.js";import A from"./multiple.demo.d6d5fe9d.js";import R from"./tags.demo.f03dd4ad.js";import L from"./sizes.demo.27c28942.js";import F from"./custom-selection.demo.d0552e8f.js";import V from"./option-group.demo.2ad8866c.js";import M from"./remote-search.demo.b4909c53.js";import G from"./custom-content.demo.32f09e6d.js";import N from"./hide-selected.demo.783fc377.js";import W from"./borderless.demo.909fa3f2.js";import H from"./custom-tags.demo.887a85d0.js";function J(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function U(e){var t,n,o,a,i;return{c:function(){t=r("p"),n=s("Basic "),o=r("code"),a=s("Select"),i=s(" usage examples"),this.h()},l:function(e){t=d(e,"P",{slot:!0});var l=u(t);n=h(l,"Basic "),o=d(l,"CODE",{});var r=u(o);a=h(r,"Select"),r.forEach(f),i=h(l," usage examples"),l.forEach(f),this.h()},h:function(){P(t,"slot","description")},m:function(e,l){g(e,t,l),$(t,n),$(t,o),$(o,a),$(t,i)},d:function(e){e&&f(t)}}}function K(e){var t,n,o,a,i,l,c,p;return{c:function(){t=r("p"),n=s("Use the "),o=r("code"),a=s("searchable"),i=s(" prop to search the options while the Select is expanded. By default it will search the label for an exact match, but a "),l=r("code"),c=s("searchFunction"),p=s(" can be passed for customizing the search."),this.h()},l:function(e){t=d(e,"P",{slot:!0});var r=u(t);n=h(r,"Use the "),o=d(r,"CODE",{});var s=u(o);a=h(s,"searchable"),s.forEach(f),i=h(r," prop to search the options while the Select is expanded. By default it will search the label for an exact match, but a "),l=d(r,"CODE",{});var m=u(l);c=h(m,"searchFunction"),m.forEach(f),p=h(r," can be passed for customizing the search."),r.forEach(f),this.h()},h:function(){P(t,"slot","description")},m:function(e,r){g(e,t,r),$(t,n),$(t,o),$(o,a),$(t,i),$(t,l),$(l,c),$(t,p)},d:function(e){e&&f(t)}}}function Y(e){var t,n,o,a,i;return{c:function(){t=r("p"),n=s("Show more than one selection using "),o=r("code"),a=s("multiple"),i=s(" mode. Multiple mode is searchable as well."),this.h()},l:function(e){t=d(e,"P",{slot:!0});var l=u(t);n=h(l,"Show more than one selection using "),o=d(l,"CODE",{});var r=u(o);a=h(r,"multiple"),r.forEach(f),i=h(l," mode. Multiple mode is searchable as well."),l.forEach(f),this.h()},h:function(){P(t,"slot","description")},m:function(e,l){g(e,t,l),$(t,n),$(t,o),$(o,a),$(t,i)},d:function(e){e&&f(t)}}}function q(e){var t,n;return{c:function(){t=r("p"),n=s("In tags mode, text added to the search input can be converted into a tag by pressing enter. Added tags will be added to the options."),this.h()},l:function(e){t=d(e,"P",{slot:!0});var o=u(t);n=h(o,"In tags mode, text added to the search input can be converted into a tag by pressing enter. Added tags will be added to the options."),o.forEach(f),this.h()},h:function(){P(t,"slot","description")},m:function(e,o){g(e,t,o),$(t,n)},d:function(e){e&&f(t)}}}function _(e){var t,n;return{c:function(){t=r("p"),n=s("The height of the input field for the select defaults to 32px. If size is set to large, the height will be 40px, and if set to small, 24px."),this.h()},l:function(e){t=d(e,"P",{slot:!0});var o=u(t);n=h(o,"The height of the input field for the select defaults to 32px. If size is set to large, the height will be 40px, and if set to small, 24px."),o.forEach(f),this.h()},h:function(){P(t,"slot","description")},m:function(e,o){g(e,t,o),$(t,n)},d:function(e){e&&f(t)}}}function Q(e){var t,n;return{c:function(){t=r("p"),n=s("Custom content can be displayed for each option inside the dropdown."),this.h()},l:function(e){t=d(e,"P",{slot:!0});var o=u(t);n=h(o,"Custom content can be displayed for each option inside the dropdown."),o.forEach(f),this.h()},h:function(){P(t,"slot","description")},m:function(e,o){g(e,t,o),$(t,n)},d:function(e){e&&f(t)}}}function X(e){var t,n;return{c:function(){t=r("p"),n=s("Options can be organized in groups within the dropdown."),this.h()},l:function(e){t=d(e,"P",{slot:!0});var o=u(t);n=h(o,"Options can be organized in groups within the dropdown."),o.forEach(f),this.h()},h:function(){P(t,"slot","description")},m:function(e,o){g(e,t,o),$(t,n)},d:function(e){e&&f(t)}}}function Z(e){var t,n,o,a,i;return{c:function(){t=r("p"),n=s("An example of using the "),o=r("code"),a=s("search"),i=s(" event to fetch options from an external source."),this.h()},l:function(e){t=d(e,"P",{slot:!0});var l=u(t);n=h(l,"An example of using the "),o=d(l,"CODE",{});var r=u(o);a=h(r,"search"),r.forEach(f),i=h(l," event to fetch options from an external source."),l.forEach(f),this.h()},h:function(){P(t,"slot","description")},m:function(e,l){g(e,t,l),$(t,n),$(t,o),$(o,a),$(t,i)},d:function(e){e&&f(t)}}}function ee(e){var t,n;return{c:function(){t=r("p"),n=s("The dropdown can be customized by adding content inside the Select tag."),this.h()},l:function(e){t=d(e,"P",{slot:!0});var o=u(t);n=h(o,"The dropdown can be customized by adding content inside the Select tag."),o.forEach(f),this.h()},h:function(){P(t,"slot","description")},m:function(e,o){g(e,t,o),$(t,n)},d:function(e){e&&f(t)}}}function te(e){var t,n;return{c:function(){t=r("p"),n=s("Hide already selected options in the dropdown."),this.h()},l:function(e){t=d(e,"P",{slot:!0});var o=u(t);n=h(o,"Hide already selected options in the dropdown."),o.forEach(f),this.h()},h:function(){P(t,"slot","description")},m:function(e,o){g(e,t,o),$(t,n)},d:function(e){e&&f(t)}}}function ne(e){var t,n;return{c:function(){t=r("p"),n=s("The select can be rendered without borders so it looks like text rather than an input."),this.h()},l:function(e){t=d(e,"P",{slot:!0});var o=u(t);n=h(o,"The select can be rendered without borders so it looks like text rather than an input."),o.forEach(f),this.h()},h:function(){P(t,"slot","description")},m:function(e,o){g(e,t,o),$(t,n)},d:function(e){e&&f(t)}}}function oe(e){var t,n,o,a,i,l,p,v,y,b,w,S,O,C;return{c:function(){t=r("div"),n=r("p"),o=s("The tags displayed in the Select input in multiple or tags mode can be customized using the "),a=r("code"),i=s("tagProps"),l=s(" function. It should return the props to be added to the tag (color, icon)."),p=c(),v=r("p"),y=r("code"),b=s("onClick"),w=s(" and "),S=r("code"),O=s("onClose"),C=s(" functions can be added as well."),this.h()},l:function(e){t=d(e,"DIV",{slot:!0});var r=u(t);n=d(r,"P",{});var s=u(n);o=h(s,"The tags displayed in the Select input in multiple or tags mode can be customized using the "),a=d(s,"CODE",{});var c=u(a);i=h(c,"tagProps"),c.forEach(f),l=h(s," function. It should return the props to be added to the tag (color, icon)."),s.forEach(f),p=m(r),v=d(r,"P",{});var g=u(v);y=d(g,"CODE",{});var $=u(y);b=h($,"onClick"),$.forEach(f),w=h(g," and "),S=d(g,"CODE",{});var x=u(S);O=h(x,"onClose"),x.forEach(f),C=h(g," functions can be added as well."),g.forEach(f),r.forEach(f),this.h()},h:function(){P(t,"slot","description")},m:function(e,r){g(e,t,r),$(t,n),$(n,o),$(n,a),$(a,i),$(n,l),$(t,p),$(t,v),$(v,y),$(y,b),$(v,w),$(v,S),$(S,O),$(v,C)},d:function(e){e&&f(t)}}}function ae(e){for(var t,n,o,a,i,E,T,P,k,D,J,ae,ie,le,re,se,ce,pe,de,ue,he,fe,me,ve,ge,$e,ye,be,we,Se=new j({props:{id:"select-demo-basic",title:"Basic",demoComponent:I,demoCode:'<Select\n  bind:value="{selected1}"\n  style="{{ width: 120 }}"\n  on:change="{onChange}"\n  class="my-select-wrapper"\n  dropdownClass="my-dropdown">\n  <Option value="jack" label="Jack" />\n  <Option value="lucy" label="Lucy" />\n  <Option value="disabled" label="Disabled" disabled />\n  <Option value="Yiminghe" label="yiminghe" />\n</Select>\n\n<Select bind:value="{selected2}" style="{{ width: 120 }}" disabled>\n  <Option value="lucy" label="Lucy" />\n</Select>\n\n<br />\n\n<Select bind:value="{selected3}" style="{{ width: 120 }}" loading>\n  <Option value="lucy" label="Lucy" />\n</Select>\n\n<Select\n  bind:value="{selected4}"\n  style="{{ width: 120 }}"\n  dropdownStyle="{{ width: 100 }}"\n  clearable>\n  <Option value="lucy" label="Lucy" />\n</Select>\n\n<script>\n  import { Select, Option } from "svant";\n\n  let selected1 = "lucy";\n  let selected2 = "lucy";\n  let selected3 = "lucy";\n  let selected4 = "lucy";\n\n  const onChange = event => {\n    // Note: the value can also be fetched from `event.detail.value`\n    console.log(`Selected: ${selected1}`);\n  };\n<\/script>\n',$$slots:{description:[U]},$$scope:{ctx:e}}}),Oe=new j({props:{id:"select-demo-search",title:"Search Field",demoComponent:z,demoCode:'<Select\n  bind:value\n  searchable\n  {searchFunction}\n  style="{{ width: 200 }}"\n  placeholder="Select a person"\n  on:focus="{onFocus}"\n  on:blur="{onBlur}"\n  on:search="{onSearch}">\n  <Option value="jack" label="Jack" />\n  <Option value="lucy" label="Lucy" />\n  <Option value="tom" label="Tom" />\n</Select>\n\n<script>\n  import { Select, Option } from "svant";\n\n  let value = "";\n\n  function onBlur() {\n    console.log("blur");\n  }\n\n  function onFocus() {\n    console.log("focus");\n  }\n\n  function onSearch(val) {\n    console.log("search:", val);\n  }\n\n  function searchFunction(searchInput, option) {\n    // option has a value and a label. For example { value: \'lucy\', label: \'Lucy\' }\n    const label = option.label.toLowerCase();\n    return label.indexOf(searchInput.toLowerCase()) >= 0;\n  }\n<\/script>\n',$$slots:{description:[K]},$$scope:{ctx:e}}}),Ce=new j({props:{id:"select-demo-multiple",title:"Multiple Select",demoComponent:A,demoCode:'<Select\n  mode="multiple"\n  style="{{ width: 300 }}"\n  placeholder="Please select"\n  bind:value\n  on:change="{handleChange}"\n  maxTagDisplayCount="{3}">\n  {#each options as option (option.value)}\n    <Option value="{option.value}" label="{option.label}" />\n  {/each}\n</Select>\n\n<script>\n  import { Select, Option } from "svant";\n\n  const options = [];\n  for (let i = 10; i < 36; i++) {\n    const value = i.toString(36) + i;\n    options.push({ value, label: value });\n  }\n\n  let value = ["a10", "c12"];\n\n  function handleChange() {\n    console.log(`selected ${value}`);\n  }\n<\/script>\n',$$slots:{description:[Y]},$$scope:{ctx:e}}}),xe=new j({props:{id:"select-demo-tags",title:"Tags",demoComponent:R,demoCode:'<Select\n  mode="tags"\n  style="{{ width: 300 }}"\n  placeholder="Tags Mode"\n  bind:value\n  on:change="{handleChange}">\n  {#each options as option (option.value)}\n    <Option value="{option.value}" label="{option.label}" />\n  {/each}\n</Select>\n\n<script>\n  import { Select, Option } from "svant";\n\n  const options = [];\n  for (let i = 10; i < 36; i++) {\n    const value = i.toString(36) + i;\n    options.push({ value, label: value });\n  }\n\n  let value = [];\n\n  function handleChange() {\n    console.log(`selected ${value}`);\n  }\n<\/script>\n',$$slots:{description:[q]},$$scope:{ctx:e}}}),Ee=new j({props:{id:"select-demo-sizes",title:"Sizes",demoComponent:L,demoCode:'<RadioGroup bind:value="{size}">\n  <RadioButton value="large">Large</RadioButton>\n  <RadioButton value="default">Default</RadioButton>\n  <RadioButton value="small">Small</RadioButton>\n</RadioGroup>\n\n<br />\n\n<Select {size} bind:value="{value1}" style="{{ width: 200, marginTop: 20 }}">\n  {#each options as option (option.value)}\n    <Option value="{option.value}" label="{option.label}" />\n  {/each}\n</Select>\n\n<br />\n\n<Select\n  {size}\n  mode="multiple"\n  style="{{ width: 400 }}"\n  placeholder="Please select"\n  bind:value="{value2}">\n  {#each options as option (option.value)}\n    <Option value="{option.value}" label="{option.label}" />\n  {/each}\n</Select>\n\n<br />\n\n<Select\n  {size}\n  mode="tags"\n  style="{{ width: 400 }}"\n  placeholder="Please Select"\n  bind:value="{value3}">\n  {#each options as option (option.value)}\n    <Option value="{option.value}" label="{option.label}" />\n  {/each}\n</Select>\n\n<script>\n  import { Select, Option, RadioGroup, RadioButton } from "svant";\n\n  let size = "default";\n\n  const options = [];\n  for (let i = 10; i < 36; i++) {\n    const value = i.toString(36) + i;\n    options.push({ value, label: value });\n  }\n\n  let value1 = "a10";\n  let value2 = ["a10", "c12"];\n  let value3 = ["a10", "c12"];\n<\/script>\n',$$slots:{description:[_]},$$scope:{ctx:e}}}),Te=new j({props:{id:"select-demo-custom-displayed-selection",title:"Custom Selection Display",demoComponent:F,demoCode:'<Select\n  mode="multiple"\n  bind:value\n  style="{{ width: 300 }}"\n  placeholder="Select a country"\n  on:change="{onChange}">\n  <Option value="china" label="China">🇨🇳 China</Option>\n  <Option value="usa" label="USA">🇺🇸 USA</Option>\n  <Option value="kosovo" label="Kosovo">🇽🇰 Kosovo</Option>\n  <Option value="england" label="England">🏴󠁧󠁢󠁥󠁮󠁧󠁿 England</Option>\n</Select>\n\n<script>\n  import { Select, Option } from "svant";\n\n  let value = ["usa", "kosovo"];\n\n  const onChange = () => {\n    console.log(`Selected: ${value}`);\n  };\n<\/script>\n',$$slots:{description:[Q]},$$scope:{ctx:e}}}),Pe=new j({props:{id:"select-demo-option-groups",title:"Option Groups",demoComponent:V,demoCode:'<Select bind:value style="{{ width: 200 }}">\n  <OptionGroup label="Manager">\n    <Option value="jack" label="Jack" />\n    <Option value="lucy" label="Lucy" />\n  </OptionGroup>\n  <OptionGroup label="Engineer">\n    <Option value="yiminghe" label="Yiminghe" />\n  </OptionGroup>\n</Select>\n\n<script>\n  import { Select, Option, OptionGroup } from "svant";\n\n  let value = "lucy";\n<\/script>\n',$$slots:{description:[X]},$$scope:{ctx:e}}}),ke=new j({props:{id:"select-demo-remote-search",title:"Remote Search",demoComponent:M,demoCode:'<Select\n  bind:value\n  searchable\n  {searchFunction}\n  placeholder="Search for Star Wars Characters"\n  style="{{ width: 275 }}"\n  on:search="{searchForStarWarsPeople}"\n  {showEmptyMessage}\n  {loading}>\n  {#each options as option (option)}\n    <Option value="{option}" label="{option}" />\n  {/each}\n</Select>\n\n<script>\n  import { Select, Option } from "svant";\n\n  let value = "";\n  let timeout;\n  let loading = false;\n  let options = [];\n  let showEmptyMessage;\n\n  // Set showEmptyMessage explicitly since we are changing options asyncrounously\n  // and the component doesn\'t know to re-render\n  $: if (options.length) {\n    showEmptyMessage = false;\n  } else {\n    showEmptyMessage = true;\n  }\n\n  function searchFunction(searchInput, option) {\n    const value = option.value.toLowerCase();\n    return value.indexOf(searchInput.toLowerCase()) >= 0;\n  }\n\n  function searchForStarWarsPeople({ detail: searchValue }) {\n    loading = true;\n    // If the user presses another key before the last search started\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n\n    timeout = setTimeout(() => {\n      if (typeof fetch) {\n        fetch(`https://swapi.dev/api/people/?search=${searchValue}`)\n          .then(response => response.json())\n          .then(async data => {\n            options = data.results.map(result => result.name);\n            loading = false;\n          });\n      }\n    }, 1000);\n  }\n<\/script>\n',$$slots:{description:[Z]},$$scope:{ctx:e}}}),De=new j({props:{id:"select-demo-custom-content",title:"Custom Dropdown Content",demoComponent:G,demoCode:'<Select\n  bind:value="{selectValue}"\n  style="{{ width: 250 }}"\n  placeholder="Custom Dropdown">\n  <Option value="jack" label="Jack" />\n  <Option value="lucy" label="Lucy" />\n  {#each additionalOptions as option (option.id)}\n    <Option value="{option.value}" label="{option.value}" />\n  {/each}\n  <div class="add-option">\n    <Input bind:value="{inputValue}" />\n    <Button type="primary" style="{{ marginLeft: 10 }}" on:click="{addOption}">\n      <PlusOutlined />\n      Add item\n    </Button>\n  </div>\n</Select>\n\n<script>\n  import { Select, Option, Input, Button } from "svant";\n  import { PlusOutlined } from "svant/icons";\n  import { nanoid } from "nanoid";\n\n  let selectValue = "";\n  let inputValue = "";\n  let additionalOptions = [];\n\n  function addOption() {\n    if (!inputValue) return;\n    additionalOptions = [\n      ...additionalOptions,\n      { value: inputValue, id: nanoid() }\n    ];\n    inputValue = "";\n  }\n<\/script>\n\n<style>\n  .add-option {\n    border-top: 1px solid rgba(0, 0, 0, 0.1);\n    padding: 8px;\n    margin-top: 8px;\n    display: flex;\n  }\n</style>\n',$$slots:{description:[ee]},$$scope:{ctx:e}}}),je=new j({props:{id:"select-demo-hide-selected",title:"Hide Already Selected",demoComponent:N,demoCode:'<Select\n  mode="multiple"\n  style="{{ width: 300 }}"\n  placeholder="Inserted are removed"\n  bind:value>\n  {#each filteredOptions as option (option.value)}\n    <Option value="{option.value}" label="{option.label}" />\n  {/each}\n</Select>\n\n<script>\n  import { Select, Option } from "svant";\n\n  const OPTIONS = [\n    { label: "Apples", value: "apples" },\n    { label: "Nails", value: "nails" },\n    { label: "Bananas", value: "bananas" },\n    { label: "Helicopters", value: "helicopters" }\n  ];\n  let value = [];\n  let filteredOptions;\n\n  $: if (value.length) {\n    filteredOptions = OPTIONS.filter(option => !value.includes(option.value));\n  } else {\n    filteredOptions = [...OPTIONS];\n  }\n<\/script>\n',$$slots:{description:[te]},$$scope:{ctx:e}}}),Be=new j({props:{id:"select-demo-borderless",title:"Borderless",demoComponent:W,demoCode:'<Select bind:value style="{{ width: 120 }}" borderless>\n  <Option value="jack" label="Jack" />\n  <Option value="lucy" label="Lucy" />\n  <Option value="Yiminghe" label="yiminghe" />\n</Select>\n\n<script>\n  import { Select, Option } from "svant";\n  let value = "lucy";\n<\/script>\n',$$slots:{description:[ne]},$$scope:{ctx:e}}}),Ie=new j({props:{id:"select-demo-custom-tags",title:"Custom Tags",demoComponent:H,demoCode:'<Select\n  mode="multiple"\n  style="{{ width: 300 }}"\n  placeholder="Please select"\n  bind:value\n  {tagProps}>\n  {#each options as option (option.value)}\n    <Option value="{option.value}" label="{option.value}" />\n  {/each}\n</Select>\n\n<script>\n  import { Select, Option } from "svant";\n\n  const options = [\n    { value: "gold" },\n    { value: "lime" },\n    { value: "green" },\n    { value: "cyan" }\n  ];\n  let value = ["gold", "cyan"];\n\n  // Takes the option as an argument. Should return tag props and can include an onClose and onClick functions\n  const tagProps = option => {\n    return {\n      color: option.value,\n      onClick: () => {\n        console.log(`${option.label} clicked`);\n      },\n      onClose: () => {\n        console.log(`${option.label} option removed`);\n      }\n    };\n  };\n<\/script>\n',$$slots:{description:[oe]},$$scope:{ctx:e}}}),ze=[e[0]],Ae={},Re=0;Re<ze.length;Re+=1)Ae=l(Ae,ze[Re]);for(var Le=new B({props:Ae}),Fe=[e[1]],Ve={},Me=0;Me<Fe.length;Me+=1)Ve=l(Ve,Fe[Me]);for(var Ge=new B({props:Ve}),Ne=[e[2]],We={},He=0;He<Ne.length;He+=1)We=l(We,Ne[He]);for(var Je=new B({props:We}),Ue=[e[3]],Ke={},Ye=0;Ye<Ue.length;Ye+=1)Ke=l(Ke,Ue[Ye]);for(var qe=new B({props:Ke}),_e=[e[4]],Qe={},Xe=0;Xe<_e.length;Xe+=1)Qe=l(Qe,_e[Xe]);var Ze=new B({props:Qe});return{c:function(){t=r("h1"),n=s("Select"),o=c(),a=r("p"),i=s("A Select component to select values from a list of options."),E=c(),T=r("h2"),P=s("Examples"),k=c(),p(Se.$$.fragment),D=c(),p(Oe.$$.fragment),J=c(),p(Ce.$$.fragment),ae=c(),p(xe.$$.fragment),ie=c(),p(Ee.$$.fragment),le=c(),p(Te.$$.fragment),re=c(),p(Pe.$$.fragment),se=c(),p(ke.$$.fragment),ce=c(),p(De.$$.fragment),pe=c(),p(je.$$.fragment),de=c(),p(Be.$$.fragment),ue=c(),p(Ie.$$.fragment),he=c(),fe=r("h2"),me=s("API"),ve=c(),p(Le.$$.fragment),ge=c(),p(Ge.$$.fragment),$e=c(),p(Je.$$.fragment),ye=c(),p(qe.$$.fragment),be=c(),p(Ze.$$.fragment)},l:function(e){t=d(e,"H1",{});var l=u(t);n=h(l,"Select"),l.forEach(f),o=m(e),a=d(e,"P",{});var r=u(a);i=h(r,"A Select component to select values from a list of options."),r.forEach(f),E=m(e),T=d(e,"H2",{});var s=u(T);P=h(s,"Examples"),s.forEach(f),k=m(e),v(Se.$$.fragment,e),D=m(e),v(Oe.$$.fragment,e),J=m(e),v(Ce.$$.fragment,e),ae=m(e),v(xe.$$.fragment,e),ie=m(e),v(Ee.$$.fragment,e),le=m(e),v(Te.$$.fragment,e),re=m(e),v(Pe.$$.fragment,e),se=m(e),v(ke.$$.fragment,e),ce=m(e),v(De.$$.fragment,e),pe=m(e),v(je.$$.fragment,e),de=m(e),v(Be.$$.fragment,e),ue=m(e),v(Ie.$$.fragment,e),he=m(e),fe=d(e,"H2",{});var c=u(fe);me=h(c,"API"),c.forEach(f),ve=m(e),v(Le.$$.fragment,e),ge=m(e),v(Ge.$$.fragment,e),$e=m(e),v(Je.$$.fragment,e),ye=m(e),v(qe.$$.fragment,e),be=m(e),v(Ze.$$.fragment,e)},m:function(e,l){g(e,t,l),$(t,n),g(e,o,l),g(e,a,l),$(a,i),g(e,E,l),g(e,T,l),$(T,P),g(e,k,l),y(Se,e,l),g(e,D,l),y(Oe,e,l),g(e,J,l),y(Ce,e,l),g(e,ae,l),y(xe,e,l),g(e,ie,l),y(Ee,e,l),g(e,le,l),y(Te,e,l),g(e,re,l),y(Pe,e,l),g(e,se,l),y(ke,e,l),g(e,ce,l),y(De,e,l),g(e,pe,l),y(je,e,l),g(e,de,l),y(Be,e,l),g(e,ue,l),y(Ie,e,l),g(e,he,l),g(e,fe,l),$(fe,me),g(e,ve,l),y(Le,e,l),g(e,ge,l),y(Ge,e,l),g(e,$e,l),y(Je,e,l),g(e,ye,l),y(qe,e,l),g(e,be,l),y(Ze,e,l),we=!0},p:function(e,t){var n=b(t,1)[0],o={};32&n&&(o.$$scope={dirty:n,ctx:e}),Se.$set(o);var a={};32&n&&(a.$$scope={dirty:n,ctx:e}),Oe.$set(a);var i={};32&n&&(i.$$scope={dirty:n,ctx:e}),Ce.$set(i);var l={};32&n&&(l.$$scope={dirty:n,ctx:e}),xe.$set(l);var r={};32&n&&(r.$$scope={dirty:n,ctx:e}),Ee.$set(r);var s={};32&n&&(s.$$scope={dirty:n,ctx:e}),Te.$set(s);var c={};32&n&&(c.$$scope={dirty:n,ctx:e}),Pe.$set(c);var p={};32&n&&(p.$$scope={dirty:n,ctx:e}),ke.$set(p);var d={};32&n&&(d.$$scope={dirty:n,ctx:e}),De.$set(d);var u={};32&n&&(u.$$scope={dirty:n,ctx:e}),je.$set(u);var h={};32&n&&(h.$$scope={dirty:n,ctx:e}),Be.$set(h);var f={};32&n&&(f.$$scope={dirty:n,ctx:e}),Ie.$set(f);var m=1&n?w(ze,[S(e[0])]):{};Le.$set(m);var v=2&n?w(Fe,[S(e[1])]):{};Ge.$set(v);var g=4&n?w(Ne,[S(e[2])]):{};Je.$set(g);var $=8&n?w(Ue,[S(e[3])]):{};qe.$set($);var y=16&n?w(_e,[S(e[4])]):{};Ze.$set(y)},i:function(e){we||(O(Se.$$.fragment,e),O(Oe.$$.fragment,e),O(Ce.$$.fragment,e),O(xe.$$.fragment,e),O(Ee.$$.fragment,e),O(Te.$$.fragment,e),O(Pe.$$.fragment,e),O(ke.$$.fragment,e),O(De.$$.fragment,e),O(je.$$.fragment,e),O(Be.$$.fragment,e),O(Ie.$$.fragment,e),O(Le.$$.fragment,e),O(Ge.$$.fragment,e),O(Je.$$.fragment,e),O(qe.$$.fragment,e),O(Ze.$$.fragment,e),we=!0)},o:function(e){C(Se.$$.fragment,e),C(Oe.$$.fragment,e),C(Ce.$$.fragment,e),C(xe.$$.fragment,e),C(Ee.$$.fragment,e),C(Te.$$.fragment,e),C(Pe.$$.fragment,e),C(ke.$$.fragment,e),C(De.$$.fragment,e),C(je.$$.fragment,e),C(Be.$$.fragment,e),C(Ie.$$.fragment,e),C(Le.$$.fragment,e),C(Ge.$$.fragment,e),C(Je.$$.fragment,e),C(qe.$$.fragment,e),C(Ze.$$.fragment,e),we=!1},d:function(e){e&&f(t),e&&f(o),e&&f(a),e&&f(E),e&&f(T),e&&f(k),x(Se,e),e&&f(D),x(Oe,e),e&&f(J),x(Ce,e),e&&f(ae),x(xe,e),e&&f(ie),x(Ee,e),e&&f(le),x(Te,e),e&&f(re),x(Pe,e),e&&f(se),x(ke,e),e&&f(ce),x(De,e),e&&f(pe),x(je,e),e&&f(de),x(Be,e),e&&f(ue),x(Ie,e),e&&f(he),e&&f(fe),e&&f(ve),x(Le,e),e&&f(ge),x(Ge,e),e&&f($e),x(Je,e),e&&f(ye),x(qe,e),e&&f(be),x(Ze,e)}}}function ie(e){return[{title:"Select Attributes",columns:["Property","Description","Type","Default"],data:[{property:"value",description:"The current value of the select. Can be used for 2 way binding: `bind:value`.",type:"String|Array",default:"-"},{property:"style",description:"Style string or style object (e.x. `style={{ fontSize: 18 }}`) for the Select wrapper.",type:"String|Object",default:"-"},{property:"class",description:"Class name or class object (e.x. `class={{ 'abc':true }}`) for the Select wrapper.",type:"String|Object",default:"-"},{property:"dropdownClass",description:"Class name or class object (e.x. `class={{ 'abc':true }}`) for the dropdown.",type:"String|Object",default:"-"},{property:"dropdownStyle",description:"Style string or style object (e.x. `style={{ fontSize: 18 }}`) for the dropdown.",type:"String|Object",default:"-"},{property:"dropdownHeight",description:"Max height of the dropdown. Overflow will be scrollable",type:"String",default:"256px"},{property:"disabled",description:"Whether or not the Select is interactive.",type:"Boolean",default:"false"},{property:"loading",description:"Whether the loading spinner should show.",type:"Boolean",default:"false"},{property:"clearable",description:"Whether the close icon will show when the Select is hovered on. When clicked it will clear the value.",type:"Boolean",default:"false"},{property:"autoClearSearchValue",description:"Whether the current search will be cleared on selecting an item. Only applies `when` mode is set to `multiple` or `tags`.",type:"Boolean",default:"true"},{property:"placeholder",description:"The placeholder to show if there is no value.",type:"String",default:"-"},{property:"searchable",description:"Whether the select has a search input in single mode to filter the options displayed.",type:"Boolean",default:"false"},{property:"searchFunction",description:"Custom search function used together with the `searchable` prop. It takes the `searchInput` and the `option` as arguments and will be used to search in place of the default label only search. If the function returns `true` for a given option, it wil be displayed.",type:"Function",default:"function that searches for a matching label"},{property:"mode",description:"The select mode. Allowed values are `single`, `multiple`, and `tags`. See the examples above for details.",type:"String",default:"single"},{property:"size",description:"The size of the Select input. Valid values are `small`, `default`, and `large`.",type:"String",default:"default"},{property:"showEmptyMessage",description:'Whether to show the "No options" message in the dropdown when there are no options available.',type:"Boolean",default:"true"},{property:"borderless",description:"Makes the Select input render with no borders so it looks like plain text with chevron down icon.",type:"Boolean",default:"false"},{property:"tagProps",description:"A function used in `tags` mode that will render tags with custom props. It takes the option as an argument and should return tag props. It can also include onClose and onClick functions.",type:"Function",default:"-"},{property:"maxTagDisplayCount",description:"The maximum amount of tags to show in the input when in `multiple` or `tags` mode.",type:"Number",default:"-"},{property:"maxTagTextLength",description:"The maximum amount of characters for a display tag in `multiple` or `tags` mode. An ellipses will be shown if there are more characters.",type:"Number",default:"-"},{property:"showArrow",description:"Whether to show the drop-down arrow.",type:"Boolean",default:"true"},{property:"suffixIcon",description:"Custom icon in place of the arrow in the select input.",type:"SvelteComponent",default:"DownOutlined"},{property:"clearIcon",description:"Clear icon to use when the Select is clearable and the user hovers over the select.",type:"SvelteComponent",default:"CloseCircleFilled"},{property:"defaultOpen",description:"Initial open state of the dropdown.",type:"Boolean",default:"false"},{property:"open",description:"Controlled open state of the dropdown.",type:"Boolean",default:"-"}]},{title:"Option Attributes",columns:["Property","Description","Type","Default"],data:[{property:"value",description:"Value of the option.",type:"String",default:"-"},{property:"label",description:"Label of the option",type:"String",default:"-"},{property:"disabled",description:"Disabled state of the option",type:"Boolean",default:"false"}]},{title:"OptionGroup Attributes",columns:["Property","Description","Type","Default"],data:[{property:"label",description:"The OptionGroup label",type:"String",default:"-"}]},{title:"Select Events",columns:["Name","Description"],data:[{name:"change",description:"The Select's value changed."},{name:"blur",description:"The user clicked away from the Select."},{name:"focus",description:"The user focused the Select."},{name:"search",description:"The user typed a character into the search input."},{name:"dropdownvisiblechange",description:"The dropdown is opened or closed."}]},{title:"Slots",columns:["Name","Description","Component"],data:[{name:"default (no name needed)",description:'The default slot for Select expects options, but any custom content can be added in there as well together with the options. See the above "Custom Dropdown Content" section for an example.',component:"Select"},{name:"no-options",description:"Custom content to display when there are no options. Generally used for when search results come up empty.",component:"Select"},{name:"default (no name needed)",description:'Custom content to display for the Option inside the dropdown. If no content is put in the default slot, the option will render the label. See the above "Custom Selection Display" section for an example.',component:"Option"}]}]}var le=function(l){e(c,i);var r,s=(r=c,function(){var e,t=E(r);if(J()){var n=E(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return T(this,e)});function c(e){var i;return t(this,c),i=s.call(this),n(a(i),e,ie,ae,o,{}),i}return c}();function re(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function se(e){var t,n,o,a=new le({});return{c:function(){t=c(),n=r("div"),p(a.$$.fragment),this.h()},l:function(e){k('[data-svelte="svelte-3clhjx"]',document.head).forEach(f),t=m(e),n=d(e,"DIV",{class:!0});var o=u(n);v(a.$$.fragment,o),o.forEach(f),this.h()},h:function(){document.title="Select",P(n,"class","markdown api-container")},m:function(e,i){g(e,t,i),g(e,n,i),y(a,n,null),o=!0},p:D,i:function(e){o||(O(a.$$.fragment,e),o=!0)},o:function(e){C(a.$$.fragment,e),o=!1},d:function(e){e&&f(t),e&&f(n),x(a)}}}var ce=function(l){e(c,i);var r,s=(r=c,function(){var e,t=E(r);if(re()){var n=E(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return T(this,e)});function c(e){var i;return t(this,c),i=s.call(this),n(a(i),e,null,se,o,{}),i}return c}();export default ce;
