import{S as o,i as e,s as t,x as n,e as s,t as a,a as i,C as l,b as r,f as c,g as d,d as p,c as m,D as f,j as u,k as h,E as y,a5 as $,a6 as g,v as b,w as v,G as M,h as w,n as C}from"./client.d8862006.js";import{E as k,D as E}from"./DocsTable.a99d71d9.js";import"./index.113e7ac2.js";import O from"./basic.demo.92bdf917.js";import x from"./async.demo.748947ee.js";import T from"./footer.demo.07fde7f7.js";import B from"./confirm.demo.ff00193b.js";import"./ModalInfoExample.53e19fd0.js";import S from"./information.demo.1cb7ff63.js";import D from"./update-destroy.demo.b5c8d2e2.js";import P from"./positioning.demo.8337081c.js";import j from"./destroy-all.demo.df4494c1.js";function A(o){let e,t;return{c(){e=s("p"),t=a("Asynchronously close a modal dialog when a the OK button is pressed. For example, you can use this pattern when you submit a form."),this.h()},l(o){e=r(o,"P",{slot:!0});var n=c(e);t=d(n,"Asynchronously close a modal dialog when a the OK button is pressed. For example, you can use this pattern when you submit a form."),n.forEach(p),this.h()},h(){w(e,"slot","description")},m(o,n){u(o,e,n),h(e,t)},d(o){o&&p(e)}}}function I(o){let e,t,n,l,f,y;return{c(){e=s("div"),t=s("p"),n=a("A more complex example which define a customized footer button bar. The dialog will change to loading state after clicking the submit button, and when the loading is done, the modal dialog will be closed."),l=i(),f=s("p"),y=a("You could set the footer prop to null if you don't need default footer buttons."),this.h()},l(o){e=r(o,"DIV",{slot:!0});var s=c(e);t=r(s,"P",{});var a=c(t);n=d(a,"A more complex example which define a customized footer button bar. The dialog will change to loading state after clicking the submit button, and when the loading is done, the modal dialog will be closed."),a.forEach(p),l=m(s),f=r(s,"P",{});var i=c(f);y=d(i,"You could set the footer prop to null if you don't need default footer buttons."),i.forEach(p),s.forEach(p),this.h()},h(){w(e,"slot","description")},m(o,s){u(o,e,s),h(e,t),h(t,n),h(e,l),h(e,f),h(f,y)},d(o){o&&p(e)}}}function V(o){let e,t,n,i,l,m,f,y,$,g,b;return{c(){e=s("p"),t=a("Use "),n=s("code"),i=a("Modal.confirm()"),l=a(" to show a confirmation modal dialog. The "),m=s("code"),f=a("onOk"),y=a(" and "),$=s("code"),g=a("onCancel"),b=a(" buttons can return a promise and will delay the modal from closing until completed."),this.h()},l(o){e=r(o,"P",{slot:!0});var s=c(e);t=d(s,"Use "),n=r(s,"CODE",{});var a=c(n);i=d(a,"Modal.confirm()"),a.forEach(p),l=d(s," to show a confirmation modal dialog. The "),m=r(s,"CODE",{});var u=c(m);f=d(u,"onOk"),u.forEach(p),y=d(s," and "),$=r(s,"CODE",{});var h=c($);g=d(h,"onCancel"),h.forEach(p),b=d(s," buttons can return a promise and will delay the modal from closing until completed."),s.forEach(p),this.h()},h(){w(e,"slot","description")},m(o,s){u(o,e,s),h(e,t),h(e,n),h(n,i),h(e,l),h(e,m),h(m,f),h(e,y),h(e,$),h($,g),h(e,b)},d(o){o&&p(e)}}}function K(o){let e,t;return{c(){e=s("p"),t=a("The information modal dialog is used to communicate system status. Only one button is used to close the dialog."),this.h()},l(o){e=r(o,"P",{slot:!0});var n=c(e);t=d(n,"The information modal dialog is used to communicate system status. Only one button is used to close the dialog."),n.forEach(p),this.h()},h(){w(e,"slot","description")},m(o,n){u(o,e,n),h(e,t)},d(o){o&&p(e)}}}function L(o){let e,t,n,i,l,m,f,y;return{c(){e=s("p"),t=a("Use Svelte's built in "),n=s("code"),i=a("$set"),l=a(" function to update the modal. The "),m=s("code"),f=a("Modal.destroy()"),y=a(" function will destroy a modal."),this.h()},l(o){e=r(o,"P",{slot:!0});var s=c(e);t=d(s,"Use Svelte's built in "),n=r(s,"CODE",{});var a=c(n);i=d(a,"$set"),a.forEach(p),l=d(s," function to update the modal. The "),m=r(s,"CODE",{});var u=c(m);f=d(u,"Modal.destroy()"),u.forEach(p),y=d(s," function will destroy a modal."),s.forEach(p),this.h()},h(){w(e,"slot","description")},m(o,s){u(o,e,s),h(e,t),h(e,n),h(n,i),h(e,l),h(e,m),h(m,f),h(e,y)},d(o){o&&p(e)}}}function W(o){let e,t;return{c(){e=s("p"),t=a("You can use the centered prop, or set the verticalPosition's top or bottom to position the modal."),this.h()},l(o){e=r(o,"P",{slot:!0});var n=c(e);t=d(n,"You can use the centered prop, or set the verticalPosition's top or bottom to position the modal."),n.forEach(p),this.h()},h(){w(e,"slot","description")},m(o,n){u(o,e,n),h(e,t)},d(o){o&&p(e)}}}function F(o){let e,t,n,i;return{c(){e=s("p"),t=s("code"),n=a("Modal.destroyAll()"),i=a(" will destroy all confirmation modal dialogs."),this.h()},l(o){e=r(o,"P",{slot:!0});var s=c(e);t=r(s,"CODE",{});var a=c(t);n=d(a,"Modal.destroyAll()"),a.forEach(p),i=d(s," will destroy all confirmation modal dialogs."),s.forEach(p),this.h()},h(){w(e,"slot","description")},m(o,s){u(o,e,s),h(e,t),h(t,n),h(e,i)},d(o){o&&p(e)}}}function N(o){let e,t,w,C,N,U,z,G,Y,H,q,Q,R,J,X,Z,_,oo,eo,to,no,so,ao,io,lo,ro,co,po,mo,fo,uo,ho,yo,$o,go,bo,vo,Mo,wo,Co,ko,Eo,Oo,xo,To,Bo,So,Do,Po,jo,Ao,Io,Vo,Ko,Lo,Wo,Fo,No,Uo,zo,Go,Yo,Ho,qo,Qo,Ro;const Jo=new k({props:{id:"demo-basic",title:"Basic",demoComponent:O,demoCode:'<Button type="primary" on:click="{showModal}">Open Modal</Button>\n<Modal\n  title="Basic Modal"\n  {visible}\n  on:ok="{openAnother}"\n  on:cancel="{closeModal}">\n  <p>Some contents...</p>\n  <p>Some contents...</p>\n  <p>Some contents...</p>\n</Modal>\n\n<script>\n  import { Modal, Button } from "svant";\n\n  let visible = false;\n\n  function showModal() {\n    visible = true;\n  }\n\n  function closeModal() {\n    visible = false;\n  }\n\n  function openAnother() {\n    Modal.confirm({\n      content: "Are you sure?",\n      onOk: () => {\n        closeModal();\n      }\n    });\n  }\n<\/script>\n'}}),Xo=new k({props:{id:"demo-async-close",title:"Asynchronously Close",demoComponent:x,demoCode:'<Button type="primary" on:click="{showModal}">\n  Open Modal with async logic\n</Button>\n<Modal\n  title="Title"\n  {visible}\n  on:ok="{handleOk}"\n  {confirmLoading}\n  on:cancel="{handleCancel}">\n  <p>{ModalText}</p>\n</Modal>\n\n<script>\n  import { Modal, Button } from "svant";\n\n  let visible = false;\n  let ModalText = "Content of the modal";\n  let confirmLoading = false;\n\n  function showModal() {\n    visible = true;\n  }\n\n  function handleOk() {\n    ModalText = "The modal will be closed after two seconds";\n    confirmLoading = true;\n\n    setTimeout(() => {\n      visible = false;\n      confirmLoading = false;\n      ModalText = "Content of the modal";\n    }, 2000);\n  }\n\n  function handleCancel() {\n    console.log("Cancel button pressed");\n    visible = false;\n  }\n<\/script>\n',$$slots:{description:[A]},$$scope:{ctx:o}}}),Zo=new k({props:{id:"demo-custom-footer",title:"Customized Footer",demoComponent:T,demoCode:'<Button type="primary" on:click="{showModal}">\n  Open Modal with customized footer\n</Button>\n<Modal {visible} title="Title" on:ok="{closeModal}" on:cancel="{closeModal}">\n  <p>Some contents...</p>\n  <p>Some contents...</p>\n  <p>Some contents...</p>\n  <p>Some contents...</p>\n  <p>Some contents...</p>\n\n  <span slot="footer">\n    <Button on:click="{closeModal}">Return</Button>\n    <Button type="primary" on:click="{closeModal}">Submit</Button>\n  </span>\n</Modal>\n\n<script>\n  import { Modal, Button } from "svant";\n\n  let visible = false;\n\n  function showModal() {\n    visible = true;\n  }\n\n  function closeModal() {\n    visible = false;\n  }\n<\/script>\n',$$slots:{description:[I]},$$scope:{ctx:o}}}),_o=new k({props:{id:"demo-confirm",title:"Confirmation Modal Dialog",demoComponent:B,demoCode:'<Button on:click="{showConfirm}">Confirm</Button>\n<Button on:click="{showDeleteConfirm}" type="dashed">Delete</Button>\n<Button on:click="{showPropsConfirm}" type="dashed">With extra props</Button>\n<Button on:click="{showPromiseConfirm}">Confirm with Promise</Button>\n\n<script>\n  import { Button, Modal } from "svant";\n  import { ExclamationCircleOutlined } from "svant/icons";\n\n  const { confirm } = Modal;\n\n  function showConfirm() {\n    confirm({\n      title: "Do you want to delete these items?",\n      icon: ExclamationCircleOutlined,\n      content: "Some descriptions",\n      onOk() {\n        console.log("OK");\n      },\n      onCancel() {\n        console.log("Cancel");\n      }\n    });\n  }\n\n  function showDeleteConfirm() {\n    confirm({\n      title: "Are you sure delete this task?",\n      icon: ExclamationCircleOutlined,\n      content: "Some descriptions",\n      okText: "Yes",\n      okType: "danger",\n      cancelText: "No",\n      onOk() {\n        console.log("OK");\n      },\n      onCancel() {\n        console.log("Cancel");\n      }\n    });\n  }\n\n  function showPropsConfirm() {\n    confirm({\n      title: "Are you sure delete this task?",\n      icon: ExclamationCircleOutlined,\n      content: "Some descriptions",\n      okText: "Yes",\n      okType: "danger",\n      okButtonProps: {\n        disabled: true\n      },\n      cancelText: "No",\n      onOk() {\n        console.log("OK");\n      },\n      onCancel() {\n        console.log("Cancel");\n      }\n    });\n  }\n\n  function showPromiseConfirm() {\n    confirm({\n      title: "Do you want to delete these items?",\n      icon: ExclamationCircleOutlined,\n      content:\n        "When clicked the OK button, this dialog will be closed after 1 second",\n      onOk() {\n        return new Promise((resolve, reject) => {\n          setTimeout(Math.random() > 0.5 ? resolve : reject, 1000);\n        }).catch(() => console.log("Oops errors!"));\n      },\n      onCancel() {}\n    });\n  }\n<\/script>\n',$$slots:{description:[V]},$$scope:{ctx:o}}}),oe=new k({props:{id:"demo-information",title:"Information Modal Dialog",demoComponent:S,demoCode:'<div class="information-buttons">\n  <Button on:click="{info}">Info</Button>\n  <Button on:click="{success}">Success</Button>\n  <Button on:click="{error}">Error</Button>\n  <Button on:click="{warning}">Warning</Button>\n</div>\n\n<script>\n  import { Button, Modal } from "svant";\n  import ModalInfoContent from "./ModalInfoExample.svelte";\n\n  function info() {\n    Modal.info({\n      title: "This is a notification message",\n      content: ModalInfoContent,\n      autoFocusButton: "ok",\n      onOk() {\n        console.log("OK Clicked");\n      }\n    });\n  }\n\n  function success() {\n    Modal.success({\n      content: "some messages...some messages..."\n    });\n  }\n\n  function error() {\n    Modal.error({\n      title: "This is an error message",\n      content: "some messages...some messages..."\n    });\n  }\n\n  function warning() {\n    Modal.warning({\n      title: "This is a warning message",\n      content: "some messages...some messages...",\n      closeable: true\n    });\n  }\n<\/script>\n',$$slots:{description:[K]},$$scope:{ctx:o}}}),ee=new k({props:{id:"demo-update-destroy",title:"Manually Updating and Destroying",demoComponent:D,demoCode:'<Button on:click="{countDown}">Open modal to close in 3s</Button>\n\n<script>\n  import { Button, Modal } from "svant";\n\n  function countDown() {\n    let secondsToGo = 3;\n    const modal = Modal.success({\n      title: "This is a notification message",\n      content: `This modal will be destroyed after ${secondsToGo} second.`\n    });\n    const timer = setInterval(() => {\n      secondsToGo -= 1;\n      modal.$set({\n        content: `This modal will be destroyed after ${secondsToGo} second.`\n      });\n    }, 1000);\n    setTimeout(() => {\n      clearInterval(timer);\n      modal.destroy();\n    }, secondsToGo * 1000);\n  }\n<\/script>\n',$$slots:{description:[L]},$$scope:{ctx:o}}}),te=new k({props:{id:"demo-update-positioning",title:"Positioning",demoComponent:P,demoCode:'<Button type="primary" on:click="{() => setModal1Visible(true)}">\n  Open 20px from the top\n</Button>\n\n<Button type="primary" on:click="{() => setModal2Visible(true)}">\n  Vertically centered\n</Button>\n\n<Modal\n  title="Top right corner"\n  verticalPosition="{{ top: \'20px\' }}"\n  visible="{modal1Visible}"\n  on:ok="{() => setModal1Visible(false)}"\n  on:cancel="{() => setModal1Visible(false)}">\n  <p>some contents...</p>\n  <p>some contents...</p>\n  <p>some contents...</p>\n</Modal>\n\n<Modal\n  title="Vertically centered modal dialog"\n  centered\n  visible="{modal2Visible}"\n  on:ok="{() => setModal2Visible(false)}"\n  on:cancel="{() => setModal2Visible(false)}">\n  <p>some contents...</p>\n  <p>some contents...</p>\n  <p>some contents...</p>\n</Modal>\n\n<script>\n  import { Button, Modal } from "svant";\n\n  export let modal1Visible = false;\n  export let modal2Visible = false;\n\n  function setModal1Visible(visible) {\n    modal1Visible = visible;\n  }\n\n  function setModal2Visible(visible) {\n    modal2Visible = visible;\n  }\n<\/script>\n',$$slots:{description:[W]},$$scope:{ctx:o}}}),ne=new k({props:{id:"demo-destroy-all",title:"Destroying all Modals Open",demoComponent:j,demoCode:'<Button on:click="{showAll}">Show Modal</Button>\n\n<script>\n  import { Button, Modal } from "svant";\n  import { ExclamationCircleOutlined } from "svant/icons";\n\n  const { confirm } = Modal;\n\n  function showAll() {\n    for (let i = 0; i < 3; i += 1) {\n      setTimeout(() => {\n        confirm({\n          icon: ExclamationCircleOutlined,\n          content: "Clicking any button will close all three",\n          onOk() {\n            destroyAll();\n          },\n          onCancel() {\n            destroyAll();\n          }\n        });\n      }, i * 500);\n    }\n  }\n\n  function destroyAll() {\n    Modal.destroyAll();\n  }\n<\/script>\n',$$slots:{description:[F]},$$scope:{ctx:o}}}),se=[o[0]];let ae={};for(let o=0;o<se.length;o+=1)ae=n(ae,se[o]);const ie=new E({props:ae}),le=[o[1]];let re={};for(let o=0;o<le.length;o+=1)re=n(re,le[o]);const ce=new E({props:re}),de=[o[2]];let pe={};for(let o=0;o<de.length;o+=1)pe=n(pe,de[o]);const me=new E({props:pe});return{c(){e=s("h1"),t=a("Modal"),w=i(),C=s("p"),N=a("Description of the Modal's function."),U=i(),z=s("h2"),G=a("Examples"),Y=i(),l(Jo.$$.fragment),H=i(),l(Xo.$$.fragment),q=i(),l(Zo.$$.fragment),Q=i(),l(_o.$$.fragment),R=i(),l(oe.$$.fragment),J=i(),l(ee.$$.fragment),X=i(),l(te.$$.fragment),Z=i(),l(ne.$$.fragment),_=i(),oo=s("h2"),eo=a("API"),to=i(),l(ie.$$.fragment),no=i(),l(ce.$$.fragment),so=i(),ao=s("h3"),io=a("Modal.method()"),lo=i(),ro=s("p"),co=a("There are five ways to display the information based on the content's nature:"),po=i(),mo=s("ul"),fo=s("li"),uo=s("code"),ho=a("Modal.info"),yo=i(),$o=s("li"),go=s("code"),bo=a("Modal.success"),vo=i(),Mo=s("li"),wo=s("code"),Co=a("Modal.error"),ko=i(),Eo=s("li"),Oo=s("code"),xo=a("Modal.warning"),To=i(),Bo=s("li"),So=s("code"),Do=a("Modal.confirm"),Po=i(),jo=s("p"),Ao=a("The items listed above are all functions, expecting a settings object as parameter. The settings object takes any of the props above as attributes."),Io=i(),Vo=s("blockquote"),Ko=s("p"),Lo=a("Note: The "),Wo=s("code"),Fo=a("closeable"),No=a(" and "),Uo=s("code"),zo=a("maskClosable"),Go=a(" props default to false for these types of modals."),Yo=i(),Ho=s("p"),qo=a("Additionally these options are available:"),Qo=i(),l(me.$$.fragment)},l(o){e=r(o,"H1",{});var n=c(e);t=d(n,"Modal"),n.forEach(p),w=m(o),C=r(o,"P",{});var s=c(C);N=d(s,"Description of the Modal's function."),s.forEach(p),U=m(o),z=r(o,"H2",{});var a=c(z);G=d(a,"Examples"),a.forEach(p),Y=m(o),f(Jo.$$.fragment,o),H=m(o),f(Xo.$$.fragment,o),q=m(o),f(Zo.$$.fragment,o),Q=m(o),f(_o.$$.fragment,o),R=m(o),f(oe.$$.fragment,o),J=m(o),f(ee.$$.fragment,o),X=m(o),f(te.$$.fragment,o),Z=m(o),f(ne.$$.fragment,o),_=m(o),oo=r(o,"H2",{});var i=c(oo);eo=d(i,"API"),i.forEach(p),to=m(o),f(ie.$$.fragment,o),no=m(o),f(ce.$$.fragment,o),so=m(o),ao=r(o,"H3",{});var l=c(ao);io=d(l,"Modal.method()"),l.forEach(p),lo=m(o),ro=r(o,"P",{});var u=c(ro);co=d(u,"There are five ways to display the information based on the content's nature:"),u.forEach(p),po=m(o),mo=r(o,"UL",{});var h=c(mo);fo=r(h,"LI",{});var y=c(fo);uo=r(y,"CODE",{});var $=c(uo);ho=d($,"Modal.info"),$.forEach(p),y.forEach(p),yo=m(h),$o=r(h,"LI",{});var g=c($o);go=r(g,"CODE",{});var b=c(go);bo=d(b,"Modal.success"),b.forEach(p),g.forEach(p),vo=m(h),Mo=r(h,"LI",{});var v=c(Mo);wo=r(v,"CODE",{});var M=c(wo);Co=d(M,"Modal.error"),M.forEach(p),v.forEach(p),ko=m(h),Eo=r(h,"LI",{});var k=c(Eo);Oo=r(k,"CODE",{});var E=c(Oo);xo=d(E,"Modal.warning"),E.forEach(p),k.forEach(p),To=m(h),Bo=r(h,"LI",{});var O=c(Bo);So=r(O,"CODE",{});var x=c(So);Do=d(x,"Modal.confirm"),x.forEach(p),O.forEach(p),h.forEach(p),Po=m(o),jo=r(o,"P",{});var T=c(jo);Ao=d(T,"The items listed above are all functions, expecting a settings object as parameter. The settings object takes any of the props above as attributes."),T.forEach(p),Io=m(o),Vo=r(o,"BLOCKQUOTE",{});var B=c(Vo);Ko=r(B,"P",{});var S=c(Ko);Lo=d(S,"Note: The "),Wo=r(S,"CODE",{});var D=c(Wo);Fo=d(D,"closeable"),D.forEach(p),No=d(S," and "),Uo=r(S,"CODE",{});var P=c(Uo);zo=d(P,"maskClosable"),P.forEach(p),Go=d(S," props default to false for these types of modals."),S.forEach(p),B.forEach(p),Yo=m(o),Ho=r(o,"P",{});var j=c(Ho);qo=d(j,"Additionally these options are available:"),j.forEach(p),Qo=m(o),f(me.$$.fragment,o)},m(o,n){u(o,e,n),h(e,t),u(o,w,n),u(o,C,n),h(C,N),u(o,U,n),u(o,z,n),h(z,G),u(o,Y,n),y(Jo,o,n),u(o,H,n),y(Xo,o,n),u(o,q,n),y(Zo,o,n),u(o,Q,n),y(_o,o,n),u(o,R,n),y(oe,o,n),u(o,J,n),y(ee,o,n),u(o,X,n),y(te,o,n),u(o,Z,n),y(ne,o,n),u(o,_,n),u(o,oo,n),h(oo,eo),u(o,to,n),y(ie,o,n),u(o,no,n),y(ce,o,n),u(o,so,n),u(o,ao,n),h(ao,io),u(o,lo,n),u(o,ro,n),h(ro,co),u(o,po,n),u(o,mo,n),h(mo,fo),h(fo,uo),h(uo,ho),h(mo,yo),h(mo,$o),h($o,go),h(go,bo),h(mo,vo),h(mo,Mo),h(Mo,wo),h(wo,Co),h(mo,ko),h(mo,Eo),h(Eo,Oo),h(Oo,xo),h(mo,To),h(mo,Bo),h(Bo,So),h(So,Do),u(o,Po,n),u(o,jo,n),h(jo,Ao),u(o,Io,n),u(o,Vo,n),h(Vo,Ko),h(Ko,Lo),h(Ko,Wo),h(Wo,Fo),h(Ko,No),h(Ko,Uo),h(Uo,zo),h(Ko,Go),u(o,Yo,n),u(o,Ho,n),h(Ho,qo),u(o,Qo,n),y(me,o,n),Ro=!0},p(o,[e]){const t={};8&e&&(t.$$scope={dirty:e,ctx:o}),Xo.$set(t);const n={};8&e&&(n.$$scope={dirty:e,ctx:o}),Zo.$set(n);const s={};8&e&&(s.$$scope={dirty:e,ctx:o}),_o.$set(s);const a={};8&e&&(a.$$scope={dirty:e,ctx:o}),oe.$set(a);const i={};8&e&&(i.$$scope={dirty:e,ctx:o}),ee.$set(i);const l={};8&e&&(l.$$scope={dirty:e,ctx:o}),te.$set(l);const r={};8&e&&(r.$$scope={dirty:e,ctx:o}),ne.$set(r);const c=1&e?$(se,[g(o[0])]):{};ie.$set(c);const d=2&e?$(le,[g(o[1])]):{};ce.$set(d);const p=4&e?$(de,[g(o[2])]):{};me.$set(p)},i(o){Ro||(b(Jo.$$.fragment,o),b(Xo.$$.fragment,o),b(Zo.$$.fragment,o),b(_o.$$.fragment,o),b(oe.$$.fragment,o),b(ee.$$.fragment,o),b(te.$$.fragment,o),b(ne.$$.fragment,o),b(ie.$$.fragment,o),b(ce.$$.fragment,o),b(me.$$.fragment,o),Ro=!0)},o(o){v(Jo.$$.fragment,o),v(Xo.$$.fragment,o),v(Zo.$$.fragment,o),v(_o.$$.fragment,o),v(oe.$$.fragment,o),v(ee.$$.fragment,o),v(te.$$.fragment,o),v(ne.$$.fragment,o),v(ie.$$.fragment,o),v(ce.$$.fragment,o),v(me.$$.fragment,o),Ro=!1},d(o){o&&p(e),o&&p(w),o&&p(C),o&&p(U),o&&p(z),o&&p(Y),M(Jo,o),o&&p(H),M(Xo,o),o&&p(q),M(Zo,o),o&&p(Q),M(_o,o),o&&p(R),M(oe,o),o&&p(J),M(ee,o),o&&p(X),M(te,o),o&&p(Z),M(ne,o),o&&p(_),o&&p(oo),o&&p(to),M(ie,o),o&&p(no),M(ce,o),o&&p(so),o&&p(ao),o&&p(lo),o&&p(ro),o&&p(po),o&&p(mo),o&&p(Po),o&&p(jo),o&&p(Io),o&&p(Vo),o&&p(Yo),o&&p(Ho),o&&p(Qo),M(me,o)}}}function U(o){return[{title:"Attributes",columns:["Property","Description","Type","Default"],data:[{property:"bodyStyle",description:"Body style for modal body element. Such as height, padding etc.",type:"String|Object",default:""},{property:"cancelText",description:"Text of the Cancel button.",type:"String",default:"Cancel"},{property:"centered",description:"Centered Modal",type:"Boolean",default:"false"},{property:"closable",description:"Whether a close (x) button is visible on top right of the modal dialog or not.",type:"Boolean",default:"true"},{property:"closeIcon",description:"Custom close icon.",type:"SvelteComponent",default:"CloseOutlined"},{property:"confirmLoading",description:"Whether to apply loading visual effect for OK button or not.",type:"Boolean",default:"false"},{property:"mask",description:"Whether show mask or not.",type:"Boolean",default:"true"},{property:"maskClosable",description:"Whether to close the modal dialog when the mask (area outside the modal) is clicked.",type:"Boolean",default:"true"},{property:"maskStyle",description:"Style for modal's mask element.",type:"String|Object",default:""},{property:"okText",description:"Text of the OK button.",type:"String",default:"OK"},{property:"okType",description:"Button `type` of the OK button.",type:"String",default:"primary"},{property:"okButtonProps",description:"The OK button props.",type:"Object",default:"{}"},{property:"cancelButtonProps",description:"The Cancel button props.",type:"Object",default:"{}"},{property:"verticalPosition",description:"The vertical position of the modal (top or bottom)",type:"Object",default:"{}"},{property:"title",description:"The modal dialog's title",type:"String",default:"-"},{property:"visible",description:"Whether the modal dialog is visible or not.",type:"Boolean",default:"false"},{property:"width",description:"Width of the modal dialog.",type:"String",default:"520px"},{property:"wrapClassName",description:"The class name of the container of the modal dialog.",type:"String",default:"-"},{property:"zIndex",description:"The `z-index` of the Modal.",type:"Number",default:"1000"},{property:"autoFocusButton",description:"Specify which button to autofocus when the modal opens.",type:"null|'ok'|'cancel'",default:"ok"},{property:"keyboard",description:"Whether the escape key will close the modal.",type:"Boolean",default:"true"}]},{title:"Events",columns:["Name","Description"],data:[{name:"cancel",description:"Specify a function that will be called when a user clicks mask, close button on top right or Cancel button."},{name:"ok",description:"Specify a function that will be called when a user clicks the OK button."},{property:"after-close",description:"Specify a function that will be called when modal is closed completely."}]},{title:"Modal.method() Attributes",columns:["Property","Description","Type","Default"],data:[{property:"content",description:"Content for the modal body.",type:"String|SvelteComponent",default:"-"},{property:"icon",description:"Custom icon to display next to the content.",type:"SvelteComponent",default:"Depends on the modal method"},{property:"onCancel",description:"Specify a function that will be called when a user clicks mask, close button on top right or Cancel button.",type:"Function",default:"-"},{property:"onOk",description:"Specify a function that will be called when a user clicks the OK button.",type:"Function",default:"-"}]}]}class z extends o{constructor(o){super(),e(this,o,U,N,t,{})}}function G(o){let e,t;const n=new z({});return{c(){e=s("div"),l(n.$$.fragment),this.h()},l(o){e=r(o,"DIV",{class:!0});var t=c(e);f(n.$$.fragment,t),t.forEach(p),this.h()},h(){w(e,"class","markdown api-container")},m(o,s){u(o,e,s),y(n,e,null),t=!0},p:C,i(o){t||(b(n.$$.fragment,o),t=!0)},o(o){v(n.$$.fragment,o),t=!1},d(o){o&&p(e),M(n)}}}export default class extends o{constructor(o){super(),e(this,o,null,G,t,{})}}
